<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | th0x4c 備忘録]]></title>
  <link href="http://th0x4c.github.com/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://th0x4c.github.com/"/>
  <updated>2013-04-21T04:02:11+09:00</updated>
  <id>http://th0x4c.github.com/</id>
  <author>
    <name><![CDATA[Takashi Hashizume]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[GDB] Linux x86-64 の呼出規約(calling convention)を gdb で確認する]]></title>
    <link href="http://th0x4c.github.com/blog/2013/04/10/gdb-calling-convention/"/>
    <updated>2013-04-10T21:01:00+09:00</updated>
    <id>http://th0x4c.github.com/blog/2013/04/10/gdb-calling-convention</id>
    <content type="html"><![CDATA[<h2>目的</h2>

<p>Linux x86-64 の呼出規約(calling convention)を gdb で確認する。</p>

<h2>環境</h2>

<ul>
<li>OS: CentOS 5.5</li>
<li>Kernel: 2.6.18-194.el5 x86_64</li>
<li>GCC: gcc 4.1.2 20080704</li>
<li>GDB: GNU gdb 7.0.1-23.el5</li>
</ul>


<h2>呼出規約(calling convention)</h2>

<p>プログラムで関数を呼び出す際に、レジスタやスタックを使いどのように引数を渡すか、戻り値をどのように受け取るかは呼出規約(calling convention)で決められている。</p>

<p>Linux x86-64 では、以下のような呼出規約になっている。
(Wikepedia <a href="http://en.wikipedia.org/wiki/X86_calling_conventions#x86-64_calling_conventions">x86 calling conventions</a>, <a href="http://ja.wikipedia.org/wiki/%E5%91%BC%E5%87%BA%E8%A6%8F%E7%B4%84#System_V_AMD64_ABI_.E5.91.BC.E5.87.BA.E8.A6.8F.E7.B4.84">呼出規約</a> から抜粋)</p>

<blockquote><p>The calling convention of the System V AMD64 ABI is followed on Solaris,
GNU/Linux, FreeBSD, and other non-Microsoft operating systems.
The first six integer or pointer arguments are passed in registers RDI, RSI,
RDX, RCX, R8, and R9, while XMM0, XMM1, XMM2, XMM3, XMM4, XMM5, XMM6 and XMM7
are used for floating point arguments.
For system calls, R10 is used instead of RCX.
As in the Microsoft x64 calling convention, additional arguments are passed
on the stack and the return value is stored in RAX.</p></blockquote>

<ul>
<li>整数・ポインタ引数: RDI, RSI, RDX, RCX, R8, R9</li>
<li>浮動小数点引数: XMM0, XMM1, XMM2, XMM3, XMM4, XMM5, XMM6, XMM7</li>
<li>戻り値: RAX</li>
<li>システムコールでは RCX の代わりに R10 を使用</li>
<li>レジスタだけでは引数の数が不足する場合はスタックを利用</li>
</ul>


<p>より詳細には <a href="http://x86-64.org/documentation/abi.pdf">System V Application Binary Interface AMD64 Architecture Processor Supplement</a> を参照。</p>

<h2>gdb による確認</h2>

<p>上記の呼出規約を実際のプログラムで確認してみる。</p>

<p>使用するサンプルプログラムは以下。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">sum</span><span class="p">(</span><span class="kt">int</span> <span class="n">a1</span><span class="p">,</span> <span class="kt">int</span> <span class="n">a2</span><span class="p">,</span> <span class="kt">int</span> <span class="n">a3</span><span class="p">,</span> <span class="kt">int</span> <span class="n">a4</span><span class="p">,</span> <span class="kt">int</span> <span class="n">a5</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="kt">int</span> <span class="n">a6</span><span class="p">,</span> <span class="kt">int</span> <span class="n">a7</span><span class="p">,</span> <span class="kt">int</span> <span class="n">a8</span><span class="p">,</span> <span class="kt">int</span> <span class="n">a9</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">func</span><span class="p">();</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">sum</span><span class="p">(</span><span class="kt">int</span> <span class="n">a1</span><span class="p">,</span> <span class="kt">int</span> <span class="n">a2</span><span class="p">,</span> <span class="kt">int</span> <span class="n">a3</span><span class="p">,</span> <span class="kt">int</span> <span class="n">a4</span><span class="p">,</span> <span class="kt">int</span> <span class="n">a5</span><span class="p">,</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>    <span class="kt">int</span> <span class="n">a6</span><span class="p">,</span> <span class="kt">int</span> <span class="n">a7</span><span class="p">,</span> <span class="kt">int</span> <span class="n">a8</span><span class="p">,</span> <span class="kt">int</span> <span class="n">a9</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="o">-</span><span class="mi">9999</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">s</span> <span class="o">=</span> <span class="n">a1</span> <span class="o">+</span> <span class="n">a2</span> <span class="o">+</span> <span class="n">a3</span> <span class="o">+</span> <span class="n">a4</span> <span class="o">+</span> <span class="n">a5</span> <span class="o">+</span> <span class="n">a6</span> <span class="o">+</span> <span class="n">a7</span> <span class="o">+</span> <span class="n">a8</span> <span class="o">+</span> <span class="n">a9</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">return</span> <span class="n">s</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">func</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">ret</span> <span class="o">=</span> <span class="n">sum</span><span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="mi">44</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">77</span><span class="p">,</span> <span class="mi">88</span><span class="p">,</span> <span class="mi">99</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;sum: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">ret</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">func</span><span class="p">();</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>実行結果は以下。</p>

<pre><code>$ gcc -g -o sample1 sample1.c
$ ./sample1
sum: 495
</code></pre>

<p>gdb から、関数 func から関数 sum を呼び出している個所を確認する。
<code>disas/m</code> というふうに修飾子 /m を指定するとソースと共に表示されて分かりやすくなる。
(ちなみに <code>objdump -d -S ./sample1</code> としてもソースと関数の逆アセンブル結果が出力される)</p>

<pre><code>$ gdb ./sample1
(gdb) set height 0
(gdb) disas/m func
Dump of assembler code for function func:
18      {
0x00000000004004da &lt;func+0&gt;:    push   %rbp
0x00000000004004db &lt;func+1&gt;:    mov    %rsp,%rbp
0x00000000004004de &lt;func+4&gt;:    sub    $0x30,%rsp

19        int ret = -1;
0x00000000004004e2 &lt;func+8&gt;:    movl   $0xffffffff,-0x4(%rbp)

20
21        ret = sum(11, 22, 33, 44, 55, 66, 77, 88, 99);
0x00000000004004e9 &lt;func+15&gt;:   movl   $0x63,0x10(%rsp)  &lt;== 第9引数(0x63 = 99) を スタック+0x10 の位置に格納
0x00000000004004f1 &lt;func+23&gt;:   movl   $0x58,0x8(%rsp)   &lt;== 第8引数(0x58 = 88) を スタック+0x8  の位置に格納
0x00000000004004f9 &lt;func+31&gt;:   movl   $0x4d,(%rsp)      &lt;== 第7引数(0x4d = 77) を スタック      の位置に格納
0x0000000000400500 &lt;func+38&gt;:   mov    $0x42,%r9d        &lt;== 第6引数(0x42 = 66) を R9  に格納
0x0000000000400506 &lt;func+44&gt;:   mov    $0x37,%r8d        &lt;== 第5引数(0x37 = 55) を R8  に格納
0x000000000040050c &lt;func+50&gt;:   mov    $0x2c,%ecx        &lt;== 第4引数(0x2c = 44) を ECX に格納
0x0000000000400511 &lt;func+55&gt;:   mov    $0x21,%edx        &lt;== 第3引数(0x21 = 33) を EDX に格納
0x0000000000400516 &lt;func+60&gt;:   mov    $0x16,%esi        &lt;== 第2引数(0x16 = 22) を RSI に格納
0x000000000040051b &lt;func+65&gt;:   mov    $0xb,%edi         &lt;== 第1引数( 0xb = 11) を RDI に格納
0x0000000000400520 &lt;func+70&gt;:   callq  0x400498 &lt;sum&gt;    &lt;== 関数 sum を呼出
0x0000000000400525 &lt;func+75&gt;:   mov    %eax,-0x4(%rbp)   &lt;== 戻り値を RAX から受け取る

22
23        printf("sum: %d\n", ret);
0x0000000000400528 &lt;func+78&gt;:   mov    -0x4(%rbp),%esi
0x000000000040052b &lt;func+81&gt;:   mov    $0x400658,%edi
0x0000000000400530 &lt;func+86&gt;:   mov    $0x0,%eax
0x0000000000400535 &lt;func+91&gt;:   callq  0x400398 &lt;printf@plt&gt;

24      }
0x000000000040053a &lt;func+96&gt;:   leaveq
0x000000000040053b &lt;func+97&gt;:   retq

End of assembler dump.
</code></pre>

<p>確かに呼出規約通り、第1引数～第6引数まで RDI, RSI, RDX, RCX, R8, R9 を順に使用して、
残りの第7引数～第9引数はスタックを利用している。戻り値は RAX に格納されている。</p>

<p>ちなみに呼び出される関数 sum の disas の結果は以下</p>

<pre><code>(gdb) disas/m sum
Dump of assembler code for function sum:
9       {
0x0000000000400498 &lt;sum+0&gt;:     push   %rbp
0x0000000000400499 &lt;sum+1&gt;:     mov    %rsp,%rbp
0x000000000040049c &lt;sum+4&gt;:     mov    %edi,-0x14(%rbp)
0x000000000040049f &lt;sum+7&gt;:     mov    %esi,-0x18(%rbp)
0x00000000004004a2 &lt;sum+10&gt;:    mov    %edx,-0x1c(%rbp)
0x00000000004004a5 &lt;sum+13&gt;:    mov    %ecx,-0x20(%rbp)
0x00000000004004a8 &lt;sum+16&gt;:    mov    %r8d,-0x24(%rbp)
0x00000000004004ac &lt;sum+20&gt;:    mov    %r9d,-0x28(%rbp)

10        int s = -9999;
0x00000000004004b0 &lt;sum+24&gt;:    movl   $0xffffd8f1,-0x4(%rbp)

11
12        s = a1 + a2 + a3 + a4 + a5 + a6 + a7 + a8 + a9;
0x00000000004004b7 &lt;sum+31&gt;:    mov    -0x18(%rbp),%eax
0x00000000004004ba &lt;sum+34&gt;:    add    -0x14(%rbp),%eax
0x00000000004004bd &lt;sum+37&gt;:    add    -0x1c(%rbp),%eax
0x00000000004004c0 &lt;sum+40&gt;:    add    -0x20(%rbp),%eax
0x00000000004004c3 &lt;sum+43&gt;:    add    -0x24(%rbp),%eax
0x00000000004004c6 &lt;sum+46&gt;:    add    -0x28(%rbp),%eax
0x00000000004004c9 &lt;sum+49&gt;:    add    0x10(%rbp),%eax
0x00000000004004cc &lt;sum+52&gt;:    add    0x18(%rbp),%eax
0x00000000004004cf &lt;sum+55&gt;:    add    0x20(%rbp),%eax
0x00000000004004d2 &lt;sum+58&gt;:    mov    %eax,-0x4(%rbp)

13
14        return s;
0x00000000004004d5 &lt;sum+61&gt;:    mov    -0x4(%rbp),%eax

15      }
0x00000000004004d8 &lt;sum+64&gt;:    leaveq
0x00000000004004d9 &lt;sum+65&gt;:    retq

End of assembler dump.
</code></pre>

<p>関数 sum で break させて、レジスタの状態やスタックを確認すれば引数の値が分かる。</p>

<pre><code>(gdb) b sum
Breakpoint 1 at 0x4004b0: file sample1.c, line 10.
(gdb) run
Starting program: /home/hashi/tmp/sample1

Breakpoint 1, sum (a1=11, a2=22, a3=33, a4=44, a5=55, a6=66, a7=77, a8=88, a9=99) at sample1.c:10
10        int s = -9999;
(gdb) info reg
rax            0x0      0
rbx            0x3e1c81bbc0     266766236608
rcx            0x2c     44                        &lt;== 第4引数
rdx            0x21     33                        &lt;== 第3引数
rsi            0x16     22                        &lt;== 第2引数
rdi            0xb      11                        &lt;== 第1引数
rbp            0x7fffffffe270   0x7fffffffe270
rsp            0x7fffffffe270   0x7fffffffe270
r8             0x37     55                        &lt;== 第5引数
r9             0x42     66                        &lt;== 第6引数
r10            0x0      0
r11            0x3e1ca1d8a0     266768341152
r12            0x0      0
r13            0x7fffffffe3b0   140737488348080
r14            0x0      0
r15            0x0      0
rip            0x4004b0 0x4004b0 &lt;sum+24&gt;         &lt;== sum+20 までの処理が終わっていて次の処理は sum+24
eflags         0x202    [ IF ]
cs             0x33     51
ss             0x2b     43
ds             0x0      0
es             0x0      0
fs             0x0      0
gs             0x0      0
fctrl          0x37f    895
fstat          0x0      0
ftag           0xffff   65535
fiseg          0x0      0
fioff          0x0      0
foseg          0x0      0
fooff          0x0      0
fop            0x0      0
mxcsr          0x1f80   [ IM DM ZM OM UM PM ]
(gdb) x/6gx $rbp
0x7fffffffe270: 0x00007fffffffe2b0      0x0000000000400525
0x7fffffffe280: 0x000000000000004d      0x0000000000000058
                          ~~~~~~~~第7引数         ~~~~~~~~第8引数
0x7fffffffe290: 0x2cb4304900000063      0x00000000004005a7
                          ~~~~~~~~第9引数
</code></pre>

<p>スタック上の値を確認するのに <code>x/6gx $rbp</code> としているのは、関数で break したときは関数の最初の方の処理(サブルーチンプロローグ)まで
終わっているが、普通はここまでで引数をスタックに積んだ後、</p>

<ul>
<li><code>call &lt;function&gt;</code> : スタックに戻り先の命令アドレスを積んで関数を呼ぶ(rsp が +0x8 される)</li>
<li><code>push %rbp</code> : ベースポインタ(rbp)の値が push され、スタックに保存される(rsp が +0x8 される)</li>
<li><code>mov %rsp,%rbp</code> : スタックポインタ(rsp)の値をベースポインタ(rbp)に保存する</li>
<li>(<code>sub $0xXX,%rsp</code> : ローカル変数を保持するためにスタックを上げる)</li>
</ul>


<p>という処理が一般的に行われるためである。結果としてスタックに積まれた引数は <code>$rbp + 0x10</code> の位置から、第7引数が <code>$rbp + 0x10</code>, 第8引数が <code>$rbp + 0x18</code>, 第9引数が <code>$rbp + 0x20</code>,... というふうに存在することになる。</p>

<p>関数 sum から返った後に レジスタ RAX にて戻り値が分かる。</p>

<pre><code>(gdb) finish
Run till exit from #0  sum (a1=11, a2=22, a3=33, a4=44, a5=55, a6=66, a7=77, a8=88, a9=99) at sample1.c:12
0x0000000000400525 in func () at sample1.c:21
21        ret = sum(11, 22, 33, 44, 55, 66, 77, 88, 99);
Value returned is $1 = 495
(gdb) p $rax
$2 = 495
</code></pre>

<h2>詳細確認</h2>

<p>せっかくなので、関数 func から関数 sum を呼び出しているところを逆アセンブルの結果から詳しく追ってみる。</p>

<p>初期状態(関数 func が呼ばれる直前)</p>

<pre><code>rbp            0x7fffffffe2d0   0x7fffffffe2d0
rsp            0x7fffffffe2c0   0x7fffffffe2c0

        0x7fffffffe2b8 +------------------+
                       |                  |
rsp --&gt; 0x7fffffffe2c0 +------------------+
                       |                  |
        0x7fffffffe2c8 +------------------+
                       |                  |
rbp --&gt; 0x7fffffffe2d0 +------------------+
                       |                  |
        0x7fffffffe2d8 +------------------+
</code></pre>

<p>関数 main から関数 func を呼ぶ</p>

<pre><code>0x0000000000400550 &lt;main+20&gt;:   callq  0x4004da &lt;func&gt;  &lt;== 関数 func を呼出
</code></pre>

<p>この命令後のレジスタの状態</p>

<pre><code>rbp            0x7fffffffe2d0   0x7fffffffe2d0
rsp            0x7fffffffe2b8   0x7fffffffe2b8

rip            0x4004da 0x4004da &lt;func&gt;

rsp --&gt; 0x7fffffffe2b8 +------------------+
                       |0x0000000000400555| &lt;== 関数 main の戻り先命令アドレス
        0x7fffffffe2c0 +------------------+
                       |                  |
        0x7fffffffe2c8 +------------------+
                       |                  |
rbp --&gt; 0x7fffffffe2d0 +------------------+
                       |                  |
        0x7fffffffe2d8 +------------------+
</code></pre>

<p>関数 func が呼び出され、ここから関数 func に入る。</p>

<pre><code>Dump of assembler code for function func:
18      {
0x00000000004004da &lt;func+0&gt;:    push   %rbp
0x00000000004004db &lt;func+1&gt;:    mov    %rsp,%rbp
0x00000000004004de &lt;func+4&gt;:    sub    $0x30,%rsp
</code></pre>

<p>この命令後のレジスタの状態</p>

<pre><code>rbp            0x7fffffffe2b0   0x7fffffffe2b0
rsp            0x7fffffffe280   0x7fffffffe280

rsp --&gt; 0x7fffffffe280 +------------------+ &lt;== ローカル変数を保持するためにスタックを上げる
                       |                  |
        0x7fffffffe288 +------------------+
                       |                  |
        0x7fffffffe290 +------------------+
                       |                  |
        0x7fffffffe298 +------------------+
                       |                  |
        0x7fffffffe2a0 +------------------+
                       |                  |
        0x7fffffffe2a8 +------------------+
                       |                  |
rbp --&gt; 0x7fffffffe2b0 +------------------+ &lt;== 元のスタックの位置がベースポインタに保存される
                       |0x00007fffffffe2d0| &lt;== ベースポインタの値がスタックに保存される
        0x7fffffffe2b8 +------------------+
                       |0x0000000000400555|
        0x7fffffffe2c0 +------------------+
                       |                  |
        0x7fffffffe2c8 +------------------+
                       |                  |
        0x7fffffffe2d0 +------------------+
                       |                  |
        0x7fffffffe2d8 +------------------+
</code></pre>

<p>進める</p>

<pre><code>19        int ret = -1;
0x00000000004004e2 &lt;func+8&gt;:    movl   $0xffffffff,-0x4(%rbp)
</code></pre>

<p>この命令後のレジスタの状態</p>

<pre><code>rbp            0x7fffffffe2b0   0x7fffffffe2b0
rsp            0x7fffffffe280   0x7fffffffe280

rsp --&gt; 0x7fffffffe280 +------------------+
                       |                  |
        0x7fffffffe288 +------------------+
                       |                  |
        0x7fffffffe290 +------------------+
                       |                  |
        0x7fffffffe298 +------------------+
                       |                  |
        0x7fffffffe2a0 +------------------+
                       |                  |
        0x7fffffffe2a8 +------------------+
                       |        0xffffffff|
rbp --&gt; 0x7fffffffe2b0 +------------------+
                       |0x00007fffffffe2d0|
        0x7fffffffe2b8 +------------------+
                       |0x0000000000400555|
        0x7fffffffe2c0 +------------------+
                       |                  |
        0x7fffffffe2c8 +------------------+
                       |                  |
        0x7fffffffe2d0 +------------------+
                       |                  |
        0x7fffffffe2d8 +------------------+
</code></pre>

<p>進める</p>

<pre><code>20
21        ret = sum(11, 22, 33, 44, 55, 66, 77, 88, 99);
0x00000000004004e9 &lt;func+15&gt;:   movl   $0x63,0x10(%rsp)  &lt;== 第9引数(0x63 = 99) を スタック+0x10 の位置に格納
0x00000000004004f1 &lt;func+23&gt;:   movl   $0x58,0x8(%rsp)   &lt;== 第8引数(0x58 = 88) を スタック+0x8  の位置に格納
0x00000000004004f9 &lt;func+31&gt;:   movl   $0x4d,(%rsp)      &lt;== 第7引数(0x4d = 77) を スタック      の位置に格納
0x0000000000400500 &lt;func+38&gt;:   mov    $0x42,%r9d        &lt;== 第6引数(0x42 = 66) を R9  に格納
0x0000000000400506 &lt;func+44&gt;:   mov    $0x37,%r8d        &lt;== 第5引数(0x37 = 55) を R8  に格納
0x000000000040050c &lt;func+50&gt;:   mov    $0x2c,%ecx        &lt;== 第4引数(0x2c = 44) を ECX に格納
0x0000000000400511 &lt;func+55&gt;:   mov    $0x21,%edx        &lt;== 第3引数(0x21 = 33) を EDX に格納
0x0000000000400516 &lt;func+60&gt;:   mov    $0x16,%esi        &lt;== 第2引数(0x16 = 22) を RSI に格納
0x000000000040051b &lt;func+65&gt;:   mov    $0xb,%edi         &lt;== 第1引数( 0xb = 11) を RDI に格納
</code></pre>

<p>この命令後のレジスタの状態</p>

<pre><code>rcx            0x2c     44                  &lt;== 第4引数
rdx            0x21     33                  &lt;== 第3引数
rsi            0x16     22                  &lt;== 第2引数
rdi            0xb      11                  &lt;== 第1引数
rbp            0x7fffffffe2b0   0x7fffffffe2b0
rsp            0x7fffffffe280   0x7fffffffe280
r8             0x37     55                  &lt;== 第5引数
r9             0x42     66                  &lt;== 第6引数

rsp --&gt; 0x7fffffffe280 +------------------+
                       |0x0000004d        | &lt;== 第7引数
        0x7fffffffe288 +------------------+
                       |0x00000058        | &lt;== 第8引数
        0x7fffffffe290 +------------------+
                       |0x00000063        | &lt;== 第9引数
        0x7fffffffe298 +------------------+
                       |                  |
        0x7fffffffe2a0 +------------------+
                       |                  |
        0x7fffffffe2a8 +------------------+
                       |        0xffffffff|
rbp --&gt; 0x7fffffffe2b0 +------------------+
                       |0x00007fffffffe2d0|
        0x7fffffffe2b8 +------------------+
                       |0x0000000000400555|
        0x7fffffffe2c0 +------------------+
                       |                  |
        0x7fffffffe2c8 +------------------+
                       |                  |
        0x7fffffffe2d0 +------------------+
                       |                  |
        0x7fffffffe2d8 +------------------+
</code></pre>

<p>進める</p>

<pre><code>0x0000000000400520 &lt;func+70&gt;:   callq  0x400498 &lt;sum&gt;    &lt;== 関数 sum を呼出
</code></pre>

<p>この命令後のレジスタの状態</p>

<pre><code>rcx            0x2c     44
rdx            0x21     33
rsi            0x16     22
rdi            0xb      11
rbp            0x7fffffffe2b0   0x7fffffffe2b0
rsp            0x7fffffffe278   0x7fffffffe278
r8             0x37     55
r9             0x42     66

rip            0x400498 0x400498 &lt;sum&gt;  &lt;== 次は関数 sum の命令を呼ぶ

rsp --&gt; 0x7fffffffe278 +------------------+
                       |0x0000000000400525| &lt;== 関数 func の戻り先命令アドレス
        0x7fffffffe280 +------------------+
                       | 0x0000004d       |
        0x7fffffffe288 +------------------+
                       | 0x00000058       |
        0x7fffffffe290 +------------------+
                       | 0x00000063       |
        0x7fffffffe298 +------------------+
                       |                  |
        0x7fffffffe2a0 +------------------+
                       |                  |
        0x7fffffffe2a8 +------------------+
                       |       0xffffffff |
rbp --&gt; 0x7fffffffe2b0 +------------------+
                       |0x00007fffffffe2d0|
        0x7fffffffe2b8 +------------------+
                       |0x0000000000400555|
        0x7fffffffe2c0 +------------------+
                       |                  |
        0x7fffffffe2c8 +------------------+
                       |                  |
        0x7fffffffe2d0 +------------------+
                       |                  |
        0x7fffffffe2d8 +------------------+
</code></pre>

<p>ここから関数 sum に入る</p>

<pre><code>Dump of assembler code for function sum:
9       {
0x0000000000400498 &lt;sum+0&gt;:     push   %rbp
0x0000000000400499 &lt;sum+1&gt;:     mov    %rsp,%rbp
0x000000000040049c &lt;sum+4&gt;:     mov    %edi,-0x14(%rbp)
0x000000000040049f &lt;sum+7&gt;:     mov    %esi,-0x18(%rbp)
0x00000000004004a2 &lt;sum+10&gt;:    mov    %edx,-0x1c(%rbp)
0x00000000004004a5 &lt;sum+13&gt;:    mov    %ecx,-0x20(%rbp)
0x00000000004004a8 &lt;sum+16&gt;:    mov    %r8d,-0x24(%rbp)
0x00000000004004ac &lt;sum+20&gt;:    mov    %r9d,-0x28(%rbp)
</code></pre>

<p>この命令後のレジスタの状態</p>

<pre><code>rcx            0x2c     44
rdx            0x21     33
rsi            0x16     22
rdi            0xb      11
rbp            0x7fffffffe270   0x7fffffffe270
rsp            0x7fffffffe270   0x7fffffffe270
r8             0x37     55
r9             0x42     66

        0x7fffffffe248 +------------------+
                       |0x00000042 0x00000037| &lt;== 66 55
        0x7fffffffe250 +------------------+
                       |0x0000002c 0x00000021| &lt;== 44 33
        0x7fffffffe258 +------------------+
                       |0x00000016 0x0000000b| &lt;== 22 11
        0x7fffffffe260 +------------------+
                       |                  |
        0x7fffffffe268 +------------------+
                       |                  |
rsp +--&gt;0x7fffffffe270 +------------------+ &lt;== 元のスタックの位置がベースポインタに保存される
rbp +                  |0x00007fffffffe2b0| &lt;== ベースポインタの値がスタックに保存される
        0x7fffffffe278 +------------------+
                       |0x0000000000400525|
        0x7fffffffe280 +------------------+
                       |0x0000004d        |
        0x7fffffffe288 +------------------+
                       |0x00000058        |
        0x7fffffffe290 +------------------+
                       |0x00000063        |
        0x7fffffffe298 +------------------+
                       |                  |
        0x7fffffffe2a0 +------------------+
                       |                  |
        0x7fffffffe2a8 +------------------+
                       |        0xffffffff|
        0x7fffffffe2b0 +------------------+
                       |0x00007fffffffe2d0|
        0x7fffffffe2b8 +------------------+
                       |0x0000000000400555|
        0x7fffffffe2c0 +------------------+
                       |                  |
        0x7fffffffe2c8 +------------------+
                       |                  |
        0x7fffffffe2d0 +------------------+
                       |                  |
        0x7fffffffe2d8 +------------------+
</code></pre>

<p>進める</p>

<pre><code>10        int s = -9999;
0x00000000004004b0 &lt;sum+24&gt;:    movl   $0xffffd8f1,-0x4(%rbp)
</code></pre>

<p>この命令後のレジスタの状態</p>

<pre><code>rcx            0x2c     44
rdx            0x21     33
rsi            0x16     22
rdi            0xb      11
rbp            0x7fffffffe270   0x7fffffffe270
rsp            0x7fffffffe270   0x7fffffffe270
r8             0x37     55
r9             0x42     66

        0x7fffffffe248 +------------------+
                       |0x00000042 0x00000037|
        0x7fffffffe250 +------------------+
                       |0x0000002c 0x00000021|
        0x7fffffffe258 +------------------+
                       |0x00000016 0x0000000b|
        0x7fffffffe260 +------------------+
                       |                  |
        0x7fffffffe268 +------------------+
                       |        0xffffd8f1| &lt;== -9999
rsp +--&gt;0x7fffffffe270 +------------------+
rbp +                  |0x00007fffffffe2b0|
        0x7fffffffe278 +------------------+
                       |0x0000000000400525|
        0x7fffffffe280 +------------------+
                       |0x0000004d        |
        0x7fffffffe288 +------------------+
                       |0x00000058        |
        0x7fffffffe290 +------------------+
                       |0x00000063        |
        0x7fffffffe298 +------------------+
                       |                  |
        0x7fffffffe2a0 +------------------+
                       |                  |
        0x7fffffffe2a8 +------------------+
                       |        0xffffffff|
        0x7fffffffe2b0 +------------------+
                       |0x00007fffffffe2d0|
        0x7fffffffe2b8 +------------------+
                       |0x0000000000400555|
        0x7fffffffe2c0 +------------------+
                       |                  |
        0x7fffffffe2c8 +------------------+
                       |                  |
        0x7fffffffe2d0 +------------------+
                       |                  |
        0x7fffffffe2d8 +------------------+
</code></pre>

<p>進める</p>

<pre><code>11
12        s = a1 + a2 + a3 + a4 + a5 + a6 + a7 + a8 + a9;
0x00000000004004b7 &lt;sum+31&gt;:    mov    -0x18(%rbp),%eax
0x00000000004004ba &lt;sum+34&gt;:    add    -0x14(%rbp),%eax
0x00000000004004bd &lt;sum+37&gt;:    add    -0x1c(%rbp),%eax
0x00000000004004c0 &lt;sum+40&gt;:    add    -0x20(%rbp),%eax
0x00000000004004c3 &lt;sum+43&gt;:    add    -0x24(%rbp),%eax
0x00000000004004c6 &lt;sum+46&gt;:    add    -0x28(%rbp),%eax
0x00000000004004c9 &lt;sum+49&gt;:    add    0x10(%rbp),%eax
0x00000000004004cc &lt;sum+52&gt;:    add    0x18(%rbp),%eax
0x00000000004004cf &lt;sum+55&gt;:    add    0x20(%rbp),%eax
0x00000000004004d2 &lt;sum+58&gt;:    mov    %eax,-0x4(%rbp)
</code></pre>

<p>この命令後のレジスタの状態</p>

<pre><code>rax            0x1ef    495

rcx            0x2c     44
rdx            0x21     33
rsi            0x16     22
rdi            0xb      11
rbp            0x7fffffffe270   0x7fffffffe270
rsp            0x7fffffffe270   0x7fffffffe270
r8             0x37     55
r9             0x42     66

        0x7fffffffe248 +------------------+
                       |0x00000042 0x00000037|
        0x7fffffffe250 +------------------+
                       |0x0000002c 0x00000021|
        0x7fffffffe258 +------------------+
                       |0x00000016 0x0000000b|
        0x7fffffffe260 +------------------+
                       |                  |
        0x7fffffffe268 +------------------+
                       |        0x000001ef| &lt;== 495
rsp +--&gt;0x7fffffffe270 +------------------+
rbp +                  |0x00007fffffffe2b0|
        0x7fffffffe278 +------------------+
                       |0x0000000000400525|
        0x7fffffffe280 +------------------+
                       |0x0000004d        |
        0x7fffffffe288 +------------------+
                       |0x00000058        |
        0x7fffffffe290 +------------------+
                       |0x00000063        |
        0x7fffffffe298 +------------------+
                       |                  |
        0x7fffffffe2a0 +------------------+
                       |                  |
        0x7fffffffe2a8 +------------------+
                       |        0xffffffff|
        0x7fffffffe2b0 +------------------+
                       |0x00007fffffffe2d0|
        0x7fffffffe2b8 +------------------+
                       |0x0000000000400555|
        0x7fffffffe2c0 +------------------+
                       |                  |
        0x7fffffffe2c8 +------------------+
                       |                  |
        0x7fffffffe2d0 +------------------+
                       |                  |
        0x7fffffffe2d8 +------------------+
</code></pre>

<p>進める</p>

<pre><code>13
14        return s;
0x00000000004004d5 &lt;sum+61&gt;:    mov    -0x4(%rbp),%eax
</code></pre>

<p>この命令後のレジスタの状態</p>

<pre><code>rax            0x1ef    495 &lt;== 戻り値が RAX に入っている

rcx            0x2c     44
rdx            0x21     33
rsi            0x16     22
rdi            0xb      11
rbp            0x7fffffffe270   0x7fffffffe270
rsp            0x7fffffffe270   0x7fffffffe270
r8             0x37     55
r9             0x42     66

        0x7fffffffe248 +------------------+
                       |0x00000042 0x00000037|
        0x7fffffffe250 +------------------+
                       |0x0000002c 0x00000021|
        0x7fffffffe258 +------------------+
                       |0x00000016 0x0000000b|
        0x7fffffffe260 +------------------+
                       |                  |
        0x7fffffffe268 +------------------+
                       |        0x000001ef|
rsp +--&gt;0x7fffffffe270 +------------------+
rbp +                  |0x00007fffffffe2b0|
        0x7fffffffe278 +------------------+
                       |0x0000000000400525|
        0x7fffffffe280 +------------------+
                       |0x0000004d        |
        0x7fffffffe288 +------------------+
                       |0x00000058        |
        0x7fffffffe290 +------------------+
                       |0x00000063        |
        0x7fffffffe298 +------------------+
                       |                  |
        0x7fffffffe2a0 +------------------+
                       |                  |
        0x7fffffffe2a8 +------------------+
                       |        0xffffffff|
        0x7fffffffe2b0 +------------------+
                       |0x00007fffffffe2d0|
        0x7fffffffe2b8 +------------------+
                       |0x0000000000400555|
        0x7fffffffe2c0 +------------------+
                       |                  |
        0x7fffffffe2c8 +------------------+
                       |                  |
        0x7fffffffe2d0 +------------------+
                       |                  |
        0x7fffffffe2d8 +------------------+
</code></pre>

<p>進める</p>

<pre><code>15      }
0x00000000004004d8 &lt;sum+64&gt;:    leaveq
</code></pre>

<p>この命令後のレジスタの状態</p>

<pre><code>rbp            0x7fffffffe2b0   0x7fffffffe2b0
rsp            0x7fffffffe278   0x7fffffffe278

        0x7fffffffe248 +------------------+
                       |0x00000042 0x00000037|
        0x7fffffffe250 +------------------+
                       |0x0000002c 0x00000021|
        0x7fffffffe258 +------------------+
                       |0x00000016 0x0000000b|
        0x7fffffffe260 +------------------+
                       |                  |
        0x7fffffffe268 +------------------+
                       |        0x000001ef|
        0x7fffffffe270 +------------------+
                       |0x00007fffffffe2b0|
rsp ---&gt;0x7fffffffe278 +------------------+
                       |0x0000000000400525|
        0x7fffffffe280 +------------------+
                       |0x0000004d        |
        0x7fffffffe288 +------------------+
                       |0x00000058        |
        0x7fffffffe290 +------------------+
                       |0x00000063        |
        0x7fffffffe298 +------------------+
                       |                  |
        0x7fffffffe2a0 +------------------+
                       |                  |
        0x7fffffffe2a8 +------------------+
                       |        0xffffffff|
rbp ---&gt;0x7fffffffe2b0 +------------------+  &lt;== ベースポインタが関数 sum 呼出直前に戻る
                       |0x00007fffffffe2d0|
        0x7fffffffe2b8 +------------------+
                       |0x0000000000400555|
        0x7fffffffe2c0 +------------------+
                       |                  |
        0x7fffffffe2c8 +------------------+
                       |                  |
        0x7fffffffe2d0 +------------------+
                       |                  |
        0x7fffffffe2d8 +------------------+
</code></pre>

<p>進める</p>

<pre><code>0x00000000004004d9 &lt;sum+65&gt;:    retq
</code></pre>

<p>この命令後のレジスタの状態</p>

<pre><code>rbp            0x7fffffffe2b0   0x7fffffffe2b0
rsp            0x7fffffffe280   0x7fffffffe280

rip            0x400525 0x400525 &lt;func+75&gt;      &lt;== 関数 func の戻り先アドレス

        0x7fffffffe248 +------------------+
                       |0x00000042 0x00000037|
        0x7fffffffe250 +------------------+
                       |0x0000002c 0x00000021|
        0x7fffffffe258 +------------------+
                       |0x00000016 0x0000000b|
        0x7fffffffe260 +------------------+
                       |                  |
        0x7fffffffe268 +------------------+
                       |        0x000001ef|
        0x7fffffffe270 +------------------+
                       |0x00007fffffffe2b0|
        0x7fffffffe278 +------------------+
                       |0x0000000000400525|
rsp --&gt; 0x7fffffffe280 +------------------+  &lt;== スタックポインタが関数 sum 呼出直前に戻る
                       |0x0000004d        |
        0x7fffffffe288 +------------------+
                       |0x00000058        |
        0x7fffffffe290 +------------------+
                       |0x00000063        |
        0x7fffffffe298 +------------------+
                       |                  |
        0x7fffffffe2a0 +------------------+
                       |                  |
        0x7fffffffe2a8 +------------------+
                       |        0xffffffff|
rbp ---&gt;0x7fffffffe2b0 +------------------+
                       |0x00007fffffffe2d0|
        0x7fffffffe2b8 +------------------+
                       |0x0000000000400555|
        0x7fffffffe2c0 +------------------+
                       |                  |
        0x7fffffffe2c8 +------------------+
                       |                  |
        0x7fffffffe2d0 +------------------+
                       |                  |
        0x7fffffffe2d8 +------------------+
</code></pre>

<p>関数 func に戻ってきた</p>

<pre><code>0x0000000000400525 &lt;func+75&gt;:   mov    %eax,-0x4(%rbp)   &lt;== 戻り値を RAX から受け取る
</code></pre>

<p>この命令後のレジスタの状態</p>

<pre><code>rax            0x1ef    495

rbp            0x7fffffffe2b0   0x7fffffffe2b0
rsp            0x7fffffffe280   0x7fffffffe280

        0x7fffffffe248 +------------------+
                       |0x00000042 0x00000037|
        0x7fffffffe250 +------------------+
                       |0x0000002c 0x00000021|
        0x7fffffffe258 +------------------+
                       |0x00000016 0x0000000b|
        0x7fffffffe260 +------------------+
                       |                  |
        0x7fffffffe268 +------------------+
                       |        0x000001ef|
        0x7fffffffe270 +------------------+
                       |0x00007fffffffe2b0|
        0x7fffffffe278 +------------------+
                       |0x0000000000400525|
rsp --&gt; 0x7fffffffe280 +------------------+
                       |0x0000004d        |
        0x7fffffffe288 +------------------+
                       |0x00000058        |
        0x7fffffffe290 +------------------+
                       |0x00000063        |
        0x7fffffffe298 +------------------+
                       |                  |
        0x7fffffffe2a0 +------------------+
                       |                  |
        0x7fffffffe2a8 +------------------+
                       |        0x000001ef|  &lt;== 戻り値を RAX から受け取って格納された
rbp ---&gt;0x7fffffffe2b0 +------------------+
                       |0x00007fffffffe2d0|
        0x7fffffffe2b8 +------------------+
                       |0x0000000000400555|
        0x7fffffffe2c0 +------------------+
                       |                  |
        0x7fffffffe2c8 +------------------+
                       |                  |
        0x7fffffffe2d0 +------------------+
                       |                  |
        0x7fffffffe2d8 +------------------+
</code></pre>

<p>進める</p>

<pre><code>22
23        printf("sum: %d\n", ret);
0x0000000000400528 &lt;func+78&gt;:   mov    -0x4(%rbp),%esi
0x000000000040052b &lt;func+81&gt;:   mov    $0x400658,%edi
0x0000000000400530 &lt;func+86&gt;:   mov    $0x0,%eax
0x0000000000400535 &lt;func+91&gt;:   callq  0x400398 &lt;printf@plt&gt;
</code></pre>

<p>この命令後のレジスタの状態(printf 関数から返った直後)</p>

<pre><code>rax            0x9      9      &lt;=== printf からの戻り値(出力バイト数なので9バイト, "sum: 495\n")

rsi            0x2aaaaaaac000   46912496123904  &lt;== printf の中で使用されたので変わっている
rdi            0x1      1                       &lt;== printf の中で使用されたので変わっている
rbp            0x7fffffffe2b0   0x7fffffffe2b0
rsp            0x7fffffffe280   0x7fffffffe280

rsp --&gt; 0x7fffffffe280 +------------------+  &lt;== スタックポインタより上位アドレス(この絵では↓)は printf 呼出前と同じ
                       |0x0000004d        |
        0x7fffffffe288 +------------------+
                       |0x00000058        |
        0x7fffffffe290 +------------------+
                       |0x00000063        |
        0x7fffffffe298 +------------------+
                       |                  |
        0x7fffffffe2a0 +------------------+
                       |                  |
        0x7fffffffe2a8 +------------------+
                       |        0x000001ef|
rbp ---&gt;0x7fffffffe2b0 +------------------+
                       |0x00007fffffffe2d0|
        0x7fffffffe2b8 +------------------+
                       |0x0000000000400555|
        0x7fffffffe2c0 +------------------+
                       |                  |
        0x7fffffffe2c8 +------------------+
                       |                  |
        0x7fffffffe2d0 +------------------+
                       |                  |
        0x7fffffffe2d8 +------------------+
</code></pre>

<p>進める</p>

<pre><code>24      }
0x000000000040053a &lt;func+96&gt;:   leaveq
0x000000000040053b &lt;func+97&gt;:   retq
</code></pre>

<p>この命令後のレジスタの状態</p>

<pre><code>rbp            0x7fffffffe2d0   0x7fffffffe2d0  &lt;== 関数 func 呼出直前に戻っている
rsp            0x7fffffffe2c0   0x7fffffffe2c0  &lt;== 関数 func 呼出直前に戻っている

rip            0x400555 0x400555 &lt;main+25&gt;      &lt;== 関数 main の戻り先アドレス

        0x7fffffffe280 +------------------+ 
                       |0x0000004d        |
        0x7fffffffe288 +------------------+
                       |0x00000058        |
        0x7fffffffe290 +------------------+
                       |0x00000063        |
        0x7fffffffe298 +------------------+
                       |                  |
        0x7fffffffe2a0 +------------------+
                       |                  |
        0x7fffffffe2a8 +------------------+
                       |        0x000001ef|
        0x7fffffffe2b0 +------------------+
                       |0x00007fffffffe2d0|
        0x7fffffffe2b8 +------------------+
                       |0x0000000000400555|
rsp --&gt; 0x7fffffffe2c0 +------------------+
                       |                  |
        0x7fffffffe2c8 +------------------+
                       |                  |
rbp --&gt; 0x7fffffffe2d0 +------------------+
                       |                  |
        0x7fffffffe2d8 +------------------+
</code></pre>

<h2>参考</h2>

<ul>
<li><a href="http://en.wikipedia.org/wiki/X86_calling_conventions#x86-64_calling_conventions">x86 calling conventions</a></li>
<li><a href="http://ja.wikipedia.org/wiki/%E5%91%BC%E5%87%BA%E8%A6%8F%E7%B4%84#System_V_AMD64_ABI_.E5.91.BC.E5.87.BA.E8.A6.8F.E7.B4.84">呼出規約</a></li>
<li><a href="http://x86-64.org/documentation/abi.pdf">System V Application Binary Interface AMD64 Architecture Processor Supplement</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[OS] OS コマンドによるボトルネック調査]]></title>
    <link href="http://th0x4c.github.com/blog/2013/04/09/os-bottleneck/"/>
    <updated>2013-04-09T21:47:00+09:00</updated>
    <id>http://th0x4c.github.com/blog/2013/04/09/os-bottleneck</id>
    <content type="html"><![CDATA[<h2>目的</h2>

<p>OS コマンドによるボトルネック調査方法をまとめる。</p>

<ul>
<li>CPU</li>
<li>メモリ</li>
<li>I/O</li>
<li>ネットワーク</li>
</ul>


<h2>環境</h2>

<ul>
<li>OS: CentOS 5.5</li>
<li>Kernel: 2.6.18-194.el5 x86_64</li>
</ul>


<h2>CPU</h2>

<h3>サーバ全体の CPU 使用率</h3>

<p>CPU 使用率を確認する。使用率が 100% に近くなっている(= idle が 0% に近くなっている)とボトルネック。</p>

<h4><code>top</code></h4>

<p><code>top</code> では複数の論理 CPU がある場合もサーバ全体として 1 つに集約されて出力される。</p>

<pre><code>$ top
top - 07:23:36 up 45 days, 17:41,  2 users,  load average: 7.22, 9.43, 8.03
Tasks: 223 total,   1 running, 222 sleeping,   0 stopped,   0 zombie
Cpu(s):  7.1%us,  8.0%sy,  0.0%ni, 70.8%id,  7.1%wa,  2.7%hi,  4.4%si,  0.0%st
Mem:   4044532k total,  3735152k used,   309380k free,   180688k buffers
Swap:  8159224k total,   629880k used,  7529344k free,  1822664k cached

  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND
 1314 oracle    15   0 1800m  83m  63m S  1.3  2.1  16:38.42 oracle
32392 root      15   0  362m  39m  15m S  1.0  1.0  18:24.31 orarootagent.bi
  667 grid      15   0 1244m  41m  16m S  0.7  1.0  11:23.32 oraagent.bin
32450 grid      RT   0  334m 121m  53m S  0.7  3.1  28:04.95 ocssd.bin
  442 grid      15   0  729m  32m  19m S  0.3  0.8   5:04.54 oracle
  676 root      15   0 1681m  27m  13m S  0.3  0.7  22:21.63 orarootagent.bi
 1016 oracle    15   0  826m  36m  16m S  0.3  0.9   7:57.93 oraagent.bin
 1300 oracle    -2   0 1781m  16m  14m S  0.3  0.4   0:28.27 oracle
 1306 oracle    15   0 1787m  24m  17m S  0.3  0.6   0:39.76 oracle
</code></pre>

<p><code>Cpu(s):</code> で始まる行が CPU 使用率</p>

<pre><code>Cpu(s):  7.1%us,  8.0%sy,  0.0%ni, 70.8%id,  7.1%wa,  2.7%hi,  4.4%si,  0.0%st
</code></pre>

<p>(-b オプションによるバッチモードでなく)対話的に起動した場合は <code>1</code> を押すと個々の CPU 毎の
CPU 使用率が出力される。</p>

<pre><code>$ top # 起動後 1 を押下
top - 07:25:32 up 45 days, 17:43,  2 users,  load average: 5.02, 8.37, 7.84
Tasks: 223 total,   1 running, 222 sleeping,   0 stopped,   0 zombie
Cpu0  :  5.6%us, 16.7%sy,  0.0%ni, 33.3%id, 41.7%wa,  0.0%hi,  2.8%si,  0.0%st
Cpu1  :  8.1%us,  5.4%sy,  0.0%ni, 70.3%id, 13.5%wa,  0.0%hi,  2.7%si,  0.0%st
Mem:   4044532k total,  3735368k used,   309164k free,   180704k buffers
Swap:  8159224k total,   629880k used,  7529344k free,  1822916k cached

  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND
32392 root      15   0  362m  39m  15m S  1.0  1.0  18:24.71 orarootagent.bi
32450 grid      RT   0  334m 121m  53m S  1.0  3.1  28:05.51 ocssd.bin
  676 root      15   0 1681m  27m  13m S  0.7  0.7  22:22.10 orarootagent.bi
 1323 oracle    -2   0 1795m 280m 265m S  0.7  7.1  10:14.08 oracle
32382 grid      15   0  172m  25m  11m S  0.7  0.6   1:30.89 gpnpd.bin
  442 grid      15   0  729m  32m  19m S  0.3  0.8   5:04.61 oracle
  477 grid      15   0  718m  21m  16m S  0.3  0.6   1:58.51 oracle
  667 grid      15   0 1244m  41m  16m S  0.3  1.0  11:23.55 oraagent.bin
 1016 oracle    15   0  826m  36m  16m S  0.3  0.9   7:58.08 oraagent.bin
</code></pre>

<p>本環境は CPU 数が2つのため、以下のようにそれぞれの CPU 使用率が出力されている。</p>

<pre><code>Cpu0  :  5.6%us, 16.7%sy,  0.0%ni, 33.3%id, 41.7%wa,  0.0%hi,  2.8%si,  0.0%st
Cpu1  :  8.1%us,  5.4%sy,  0.0%ni, 70.3%id, 13.5%wa,  0.0%hi,  2.7%si,  0.0%st
</code></pre>

<h4><code>mpstat</code></h4>

<p><code>mpstat</code> でも CPU 使用率が確認できる。デフォルトではすべての CPU が集約されて出力される。</p>

<pre><code>$ mpstat 2 3  # 2秒毎に3回出力
Linux 2.6.18-194.el5 (sv1.local)     04/08/13

07:33:04     CPU   %user   %nice    %sys %iowait    %irq   %soft  %steal   %idle    intr/s
07:33:06     all    4.41    0.00    4.41   13.24    1.47    0.00    0.00   76.47   1409.09
07:33:08     all    5.06    0.00    3.80    6.33    0.00    2.53    0.00   82.28   1481.40
07:33:10     all   10.61    0.00   10.61   12.12    0.00    3.03    0.00   63.64   1468.75
Average:     all    6.57    0.00    6.10   10.33    0.47    1.88    0.00   74.65   1455.56
</code></pre>

<p>個々の CPU の使用率を確認したい場合は、<code>-P ALL</code> オプションを付与する。</p>

<pre><code>$ mpstat -P ALL 2 3
Linux 2.6.18-194.el5 (sv1.local)     04/08/13

07:35:03     CPU   %user   %nice    %sys %iowait    %irq   %soft  %steal   %idle    intr/s
07:35:05     all    9.09    0.00    5.19    7.79    0.00    2.60    0.00   75.32   1353.85
07:35:05       0   10.26    0.00    5.13   15.38    2.56    2.56    0.00   64.10   1353.85
07:35:05       1    7.69    0.00    2.56    2.56    0.00    2.56    0.00   84.62      0.00

07:35:05     CPU   %user   %nice    %sys %iowait    %irq   %soft  %steal   %idle    intr/s
07:35:07     all    5.80    0.00    4.35   10.14    0.00    2.90    0.00   76.81   1412.12
07:35:07       0    3.03    0.00    6.06   12.12    0.00    3.03    0.00   75.76   1412.12
07:35:07       1    5.88    0.00    2.94    8.82    0.00    0.00    0.00   82.35      0.00

07:35:07     CPU   %user   %nice    %sys %iowait    %irq   %soft  %steal   %idle    intr/s
07:35:09     all   10.00    0.00   15.00   13.33    0.00    1.67    0.00   60.00   1393.55
07:35:09       0    6.45    0.00   19.35   25.81    0.00    3.23    0.00   45.16   1393.55
07:35:09       1   13.33    0.00   13.33    0.00    0.00    0.00    0.00   73.33      0.00

Average:     CPU   %user   %nice    %sys %iowait    %irq   %soft  %steal   %idle    intr/s
Average:     all    8.25    0.00    7.77   10.19    0.00    2.43    0.00   71.36   1384.47
Average:       0    6.80    0.00    9.71   17.48    0.97    2.91    0.00   62.14   1384.47
Average:       1    8.74    0.00    5.83    3.88    0.00    0.97    0.00   80.58      0.00
</code></pre>

<p>各項目の意味は以下の通り。</p>

<table>
<thead>
<tr>
<th></th>
<th align="left"> 項目    </th>
<th align="left"> 説明                                                 </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> CPU     </td>
<td align="left"> CPU番号。ALLの場合は、全CPUの平均値であることを示す。</td>
</tr>
<tr>
<td></td>
<td align="left"> %user   </td>
<td align="left"> ユーザレベル（アプリケーション）のCPU使用率</td>
</tr>
<tr>
<td></td>
<td align="left"> %nice   </td>
<td align="left"> 優先度(ナイス値)によるユーザーレベルのCPU使用率</td>
</tr>
<tr>
<td></td>
<td align="left"> %sys    </td>
<td align="left"> システムレベル(kernel)のCPU使用率</td>
</tr>
<tr>
<td></td>
<td align="left"> %iowait </td>
<td align="left"> ディスクi/o競合によるCPU待機時間割合</td>
</tr>
<tr>
<td></td>
<td align="left"> %irq    </td>
<td align="left"> CPUの割り込み実行時間割合</td>
</tr>
<tr>
<td></td>
<td align="left"> %soft   </td>
<td align="left"> CPUのソフトウェア割り込み実行時間割合</td>
</tr>
<tr>
<td></td>
<td align="left"> %idle   </td>
<td align="left"> CPUのアイドル時間割合(ディスクi/o待機時間はのぞく)</td>
</tr>
<tr>
<td></td>
<td align="left"> intr/s  </td>
<td align="left"> 1秒あたりの平均割り込み数</td>
</tr>
</tbody>
</table>


<h4><code>vmstat</code></h4>

<p><code>vmstat</code> からも CPU 使用率が確認できる。</p>

<pre><code>$ vmstat 2 3
procs -----------memory---------- ---swap-- -----io---- --system-- -----cpu------
 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
 1  0 629504 306172 181788 1825200    0    1   105   236   14   12  4  5 85  6  0
10  1 629504 306048 181788 1825200    0    0    35   732  300 1425  7  5 77 11  0
 4  0 629504 306040 181788 1825204    0    0    27     2  236 1552  9 11 75  5  0
</code></pre>

<table>
<thead>
<tr>
<th></th>
<th align="left"> 項目 </th>
<th align="left"> 説明                                                                                  </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> r    </td>
<td align="left"> CPUを割り当て中もしくは割り当て可能なプロセスの数。CPUの個数以下であることが望ましい。</td>
</tr>
<tr>
<td></td>
<td align="left"> b    </td>
<td align="left"> 割り込みを禁止しているプロセスの数。I/O待ちなどで割り込み不可能なときに発生。ゼロであることが望ましい。</td>
</tr>
<tr>
<td></td>
<td align="left"> us   </td>
<td align="left"> ユーザー時間の CPU 使用率(nice 時間を含む) </td>
</tr>
<tr>
<td></td>
<td align="left"> sy   </td>
<td align="left"> システム時間の CPU 使用率</td>
</tr>
<tr>
<td></td>
<td align="left"> id   </td>
<td align="left"> アイドル時間の割合</td>
</tr>
<tr>
<td></td>
<td align="left"> wa   </td>
<td align="left"> IO 待ち時間の割合</td>
</tr>
</tbody>
</table>


<p>CPU の割り当て状況を示す r, b の値も重要。r が CPU の個数と同じ場合は、システムの CPU がフルで使われており、
r が CPU 数より多い場合は、CPU の割り当てを待っていて、ボトルネックとなっている状況。
また、b が 0 より大きい場合は、I/O 等 CPU 以外のボトルネックが発生している可能性がある。</p>

<h3>プロセス単位の CPU 使用率</h3>

<p>プロセス単位の CPU 使用率を確認し、CPU 使用率が 100% に近くなっているプロセスが
無いか確認する。</p>

<h4><code>top</code></h4>

<p><code>top</code> によりプロセス単位の CPU 使用率が確認できる。</p>

<p>出力結果の下部にプロセス毎の情報があり、<code>%CPU</code> で CPU 使用率が確認できる。</p>

<pre><code>  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND
 1314 oracle    15   0 1800m  83m  63m S  1.3  2.1  16:38.42 oracle
32392 root      15   0  362m  39m  15m S  1.0  1.0  18:24.31 orarootagent.bi
  667 grid      15   0 1244m  41m  16m S  0.7  1.0  11:23.32 oraagent.bin
32450 grid      RT   0  334m 121m  53m S  0.7  3.1  28:04.95 ocssd.bin
  442 grid      15   0  729m  32m  19m S  0.3  0.8   5:04.54 oracle
  676 root      15   0 1681m  27m  13m S  0.3  0.7  22:21.63 orarootagent.bi
 1016 oracle    15   0  826m  36m  16m S  0.3  0.9   7:57.93 oraagent.bin
 1300 oracle    -2   0 1781m  16m  14m S  0.3  0.4   0:28.27 oracle
 1306 oracle    15   0 1787m  24m  17m S  0.3  0.6   0:39.76 oracle
</code></pre>

<p><code>top</code> を対話的に起動すると画面サイズ分しかプロセスが出力されず、すべてのプロセス
が確認できるわけではない。その場合は -b オプションでバッチモードで起動する。
例えば、バッチモードで 2 秒毎に 3 回出力する場合は、<code>top -b -d 2 -n 3</code> とする。</p>

<h4><code>ps aux</code></h4>

<p><code>ps aux</code> の %CPU の項目でプロセス単位の CPU 使用率が確認できる。こちらはすべてのプロセスが
確認できる。</p>

<pre><code>$ ps aux
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.0  0.0  10348   680 ?        Ss   Feb21   0:15 init [5]
root         2  0.0  0.0      0     0 ?        S&lt;   Feb21   5:34 [migration/0]
root         3  0.0  0.0      0     0 ?        SN   Feb21   0:10 [ksoftirqd/0]
root         4  0.0  0.0      0     0 ?        S&lt;   Feb21   3:58 [migration/1]
root         5  0.0  0.0      0     0 ?        SN   Feb21   0:18 [ksoftirqd/1]
root         6  0.0  0.0      0     0 ?        S&lt;   Feb21  33:22 [events/0]
root         7  0.0  0.0      0     0 ?        S&lt;   Feb21   0:06 [events/1]
...
</code></pre>

<h3>プロセス単位で CPU を使用している原因の特定</h3>

<p>CPU を消費しているプロセスを特定したら、プロファイラ(OProfile, Valgrind(Callgrind)など)や
動的トレーサ(strace, ltrace など)で、どの関数で CPU を消費しているか特定していく。
簡易的には <code>pstack</code> を定期的に採取して、どの関数を通っている割合が多そうか確認する。</p>

<h2>メモリ</h2>

<h3>物理メモリ、スワップの確認</h3>

<p>物理メモリのサイズを確認するには次を実行。</p>

<pre><code>$ grep MemTotal /proc/meminfo
MemTotal:      4044532 kB
</code></pre>

<p>スワップのサイズを確認するには次を実行。</p>

<pre><code>$ grep SwapTotal /proc/meminfo
SwapTotal:     8159224 kB
</code></pre>

<h3>サーバ全体の メモリ 使用量</h3>

<p>メモリ使用量を確認して、物理メモリ以上使用されてスワップが多発していないか確認する。</p>

<h4><code>vmstat</code>, <code>free</code>, <code>cat /proc/meminfo</code></h4>

<p>同じタイミングで取得した <code>vmstat</code>, <code>free</code>, <code>cat /proc/meminfo</code> の出力結果は以下</p>

<p><code>vmstat</code> の出力。</p>

<pre><code>$ vmstat 2 3
procs -----------memory---------- ---swap-- -----io---- --system-- -----cpu------
 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
 1  0 629504 306172 181788 1825200    0    1   105   236   14   12  4  5 85  6  0
10  1 629504 306048 181788 1825200    0    0    35   732  300 1425  7  5 77 11  0
 4  0 629504 306040 181788 1825204    0    0    27     2  236 1552  9 11 75  5  0
</code></pre>

<table>
<thead>
<tr>
<th></th>
<th align="left"> 項目  </th>
<th align="left"> 説明                                                           </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> swapd </td>
<td align="left"> 仮想メモリの量(KB)</td>
</tr>
<tr>
<td></td>
<td align="left"> free  </td>
<td align="left"> 空きメモリの量(KB)</td>
</tr>
<tr>
<td></td>
<td align="left"> buff  </td>
<td align="left"> バッファに用いられているメモリの量(KB)</td>
</tr>
<tr>
<td></td>
<td align="left"> cache </td>
<td align="left"> キャッシュに用いられているメモリの量(KB)</td>
</tr>
</tbody>
</table>


<p><code>free</code> の出力</p>

<pre><code>$ free
             total       used       free     shared    buffers     cached
Mem:       4044532    3738376     306156          0     181788    1825204
-/+ buffers/cache:    1731384    2313148
Swap:      8159224     629504    7529720
</code></pre>

<p><code>cat /proc/meminfo</code> の出力</p>

<pre><code>$ cat /proc/meminfo
MemTotal:      4044532 kB
MemFree:        306148 kB
Buffers:        181788 kB
Cached:        1825204 kB
SwapCached:     358460 kB
Active:        2598312 kB
Inactive:       867084 kB
HighTotal:           0 kB
HighFree:            0 kB
LowTotal:      4044532 kB
LowFree:        306148 kB
SwapTotal:     8159224 kB
SwapFree:      7529720 kB
Dirty:             588 kB
Writeback:           0 kB
AnonPages:     1099912 kB
Mapped:         687964 kB
Slab:           153028 kB
PageTables:      63084 kB
NFS_Unstable:        0 kB
Bounce:              0 kB
CommitLimit:  10181488 kB
Committed_AS:  6503324 kB
VmallocTotal: 34359738367 kB
VmallocUsed:    286400 kB
VmallocChunk: 34359451067 kB
HugePages_Total:     0
HugePages_Free:      0
HugePages_Rsvd:      0
Hugepagesize:     2048 kB
</code></pre>

<table>
<thead>
<tr>
<th></th>
<th align="left"> 項目        </th>
<th align="left"> 説明                                                            </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> MemTotal    </td>
<td align="left"> システム全体で利用できる物理メモリの総容量。システム起動時に計算される。その後、この値が変化することはない。</td>
</tr>
<tr>
<td></td>
<td align="left"> MemFree     </td>
<td align="left"> システム全体で利用できる物理メモリの空き容量</td>
</tr>
<tr>
<td></td>
<td align="left"> Buffers     </td>
<td align="left"> ファイルなどのメタデータとして使用している物理メモリの総容量</td>
</tr>
<tr>
<td></td>
<td align="left"> Cached      </td>
<td align="left"> ファイルデータのキャッシュなどに使用している物理メモリの総容量。共有メモリは Cached に加算される。SwapCachedは含まない。</td>
</tr>
<tr>
<td></td>
<td align="left"> SwapCached  </td>
<td align="left"> 物理メモリ上にキャッシュされたスワップページの総容量</td>
</tr>
<tr>
<td></td>
<td align="left"> Active      </td>
<td align="left"> 最近アクセスした（とカーネルが思っている）物理メモリの容量</td>
</tr>
<tr>
<td></td>
<td align="left"> Inactive    </td>
<td align="left"> 最近アクセスしていない（とカーネルが思っている）、解放してよい物理メモリの容量</td>
</tr>
<tr>
<td></td>
<td align="left"> Slab        </td>
<td align="left"> スラブアロケータで使用されている物理メモリの総容量</td>
</tr>
<tr>
<td></td>
<td align="left"> VmallocUsed </td>
<td align="left"> vmalloc()で確保された物理メモリ領域とMMCONFIGで確保しているメモリ領域の総容量</td>
</tr>
<tr>
<td></td>
<td align="left"> AnonPages   </td>
<td align="left"> 無名ページ（Anonymous Page）の領域。無名ページとは、ユーザープロセスがmalloc()などで確保したり、プログラム本体用に利用するメモリ領域。</td>
</tr>
</tbody>
</table>


<p>出力を確認すると以下が分かる。</p>

<ul>
<li>「<code>vmstat</code> の free」 = 「<code>free</code> の Mem: の free」 = 「<code>cat /proc/meminfo</code> の MemFree」</li>
<li>「<code>vmstat</code> の buff」 = 「<code>free</code> の Mem: の buffers」 = 「<code>cat /proc/meminfo</code> の Buffers」</li>
<li>「<code>vmstat</code> の cache」 = 「<code>free</code> の Mem: の cached」 = 「<code>cat /proc/meminfo</code> の Cached」</li>
</ul>


<p>Linux では、空いているメモリはファイル I/O を効率化させるためにページキャッシュ
として利用する。
buffers と cached はページキャッシュ(の一部)であり、実際はストレージと同期がとれ
ていれば再利用可能なメモリである。</p>

<p>したがって利用可能な物理メモリ量は実際は、free + buffers + cached (<code>free</code> の free+)となる。</p>

<pre><code>|================= total =================|
|= free =|============= used =============|

+--------+----------+-----------+---------+
|        |          |           |         |
|        |          |           |         |
|        |          |           |         |
+--------+----------+-----------+---------+

         |= cached =|= buffers =|
|============ free+ ============|= used- =|
</code></pre>

<p>厳密には、使用可能な物理メモリは「ストレージと同期されていない」ページキャッシュを除かないといけない。
ストレージと同期されており、すぐに再利用可能なメモリは「<code>cat /proc/meminfo</code> の Inactive 」
(もしくは <code>vmstat -a</code>)にて確認ができる。したがって、実際に再利用可能なメモリは厳密には「<code>cat /proc/meminfo</code> の MemFree + Inactive」
となる。(概算としては、free + buffers + cached でよいと思う。)</p>

<p>ちなみに /proc/meminfo に関して原則として、以下のような計算式が成り立つ。</p>

<ul>
<li>MemTotal = MemFree + Active + Inactive + Slab + VmallocUsed + PageTables</li>
<li>Active + Inactive = AnonPages + Cached + Buffers + SwapCached</li>
<li>利用可能なメモリ = MemFree + Inactive, 解放できないメモリ = Active + Slab + VmallocUsed + PageTables</li>
</ul>


<h4>スワップ状況の確認</h4>

<p>サーバ全体のスワップ状況は、<code>vmstat</code> の swap 欄の si(ディスクからページインされるメモリの量 KB/秒),
so(ディスクにページアウトしているメモリ量 KB/秒)から確認する。
si, so が定常的に 0 より大きい場合は、スワップが発生しているのでメモリ不足に陥っている。</p>

<pre><code>$ vmstat 2    # メモリを使用するプログラムを実行中

procs -----------memory---------- ---swap-- -----io---- --system-- -----cpu------
 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
20  1 731484  36160 180152 1722248    0    1   105   238    7    9  4  5 84  6  0
16  1 731484  31292 180152 1722248    0    0    69    80  151  788 22 78  0  0  0
13  3 731484  26836 180152 1722248    0    0    19   168  149  807 23 69  8  0  0
 2  0 733040  26528 179984 1720100    0    0    34    55  134  850 22 53 13 13  0
...&lt;中略&gt;
19  2 797140  24992   4276 787872    0 2804    56  2859  254 1024 38 62  0  0  0
19  1 814564  26708   2404 761484    0 5008   131  5191  246  912 37 63  0  0  0
 6  1 816372  25500   2236 755376    0  626   113   882  156  599 35 65  0  0  0
28  4 824480  26208   1516 739372    0 3912   871  3934  265 1038 28 61  0 10  0
16  2 840912  24156   1232 725428    0 3166   963  3216  196  834 30 66  0  5  0
19  4 861804  25324   1268 718716    0 6790   323  7015  222  839 34 66  0  0  0
 7  2 890208  28728   1296 709336    0 8648   878  8650  282 1061 30 66  2  3  0
19  3 919964  34312   1376 707076    0 10578   399 10820  293 1106 29 66  0  5  0
24  6 987308  55048   1384 707584    0 24256   293 24326  425 1415 36 64  0  0  0
 2  9 987292  38232   1444 707816   32    0   207   158  189  738 48 50  0  2  0
 6  2 1009184  33604   1504 709208    0 10228   780 10291  342 1047 30 58  5  7  0
 5  2 1014212  26284   1536 709544    0 2078   259  2086  151  798 37 55  0  8  0
21  1 1030672  27936   1556 710044   16 7522   323  7758  225  944 37 58  2  3  0
10  1 1041180  26028   1604 710244   18 5318   239  5320  207 1013 38 62  0  0  0
24  5 1049788  28312   1632 710332    0 3618    31  3681  117  494 44 56  0  0  0
</code></pre>

<table>
<thead>
<tr>
<th></th>
<th align="left"> 項目 </th>
<th align="left"> 説明                                                                </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> si   </td>
<td align="left"> ディスクからスワップインされているメモリの量 (KB/s)</td>
</tr>
<tr>
<td></td>
<td align="left"> so   </td>
<td align="left"> ディスクにスワップしているメモリの量 (KB/s)</td>
</tr>
</tbody>
</table>


<p>また、スワップ時は <code>kswapd0</code> というカーネルスレッドが動作するので、これが <code>top</code> などで確認して
CPU 使用率の上位に出現しているとスワップが多発している状況と判断できる。</p>

<h3>プロセス単位の メモリ 使用量</h3>

<p>プロセス単位のメモリ使用量を確認して、物理メモリを多く消費しているプロセスが無いか確認する。</p>

<h4><code>top</code></h4>

<p>VIRT, RES, SHR, %MEM から確認する。RES が物理メモリ使用量。</p>

<pre><code>$ top
top - 11:41:10 up 46 days, 21:59,  3 users,  load average: 9.69, 8.95, 7.96
Tasks: 226 total,   9 running, 217 sleeping,   0 stopped,   0 zombie
Cpu(s):  3.8%us,  4.4%sy,  0.1%ni, 84.5%id,  6.1%wa,  0.3%hi,  0.8%si,  0.0%st
Mem:   4044532k total,  2077900k used,  1966632k free,     7208k buffers
Swap:  8159224k total,   938488k used,  7220736k free,   745852k cached

  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND
  477 grid      15   0  718m  21m  16m S  1.0  0.6   2:35.70 oracle
  667 grid      15   0 1247m  44m  16m S  1.0  1.1  15:30.20 oraagent.bin
 1310 oracle    15   0 1781m  17m  15m S  1.0  0.4   1:34.40 oracle
 1314 oracle    15   0 1800m  84m  64m S  1.0  2.1  21:53.70 oracle
32241 root      15   0  319m  51m  21m S  1.0  1.3   7:56.18 ohasd.bin
32360 grid      15   0  310m  35m  15m S  1.0  0.9   7:53.41 oraagent.bin
32582 root      16   0  240m  21m  10m S  1.0  0.6   8:48.50 octssd.bin
    1 root      15   0 10348  672  568 S  0.0  0.0   0:15.40 init
</code></pre>

<table>
<thead>
<tr>
<th></th>
<th align="left"> 項目 </th>
<th align="left"> 説明                                                                </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> VIRT </td>
<td align="left"> 使用している仮想メモリの総量</td>
</tr>
<tr>
<td></td>
<td align="left"> RES  </td>
<td align="left"> 使用しているスワップされていない物理メモリの総量</td>
</tr>
<tr>
<td></td>
<td align="left"> SHR  </td>
<td align="left"> 利用している共有メモリの総量。他のプロセスと共有される可能性がある。</td>
</tr>
<tr>
<td></td>
<td align="left"> %MEM </td>
<td align="left"> 現在使用している利用可能な物理メモリの占有率</td>
</tr>
</tbody>
</table>


<h4><code>ps aux</code></h4>

<p>%MEM, VSZ, RSS から確認する。RSS が物理メモリ使用量。</p>

<pre><code>$ ps aux
USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.0  0.0  10348   672 ?        Ss   Feb21   0:15 init [5]
root         2  0.0  0.0      0     0 ?        S&lt;   Feb21   5:40 [migration/0]
...&lt;中略&gt;
grid       477  0.0  0.5 735924 22424 ?        Ss   Apr04   2:35 asm_gmon_+ASM1
...&lt;中略&gt;
grid       667  0.2  1.1 1277500 45740 ?       Ssl  Apr04  15:30 /u01/app/11.2.0.3/grid/bin/oraagent.bin
...&lt;中略&gt;
oracle    1310  0.0  0.4 1823952 17752 ?       Ss   Apr04   1:34 ora_ping_rac1
oracle    1312  0.0  0.4 1823952 17188 ?       Ss   Apr04   0:04 ora_acms_rac1
oracle    1314  0.3  2.1 1843460 86036 ?       Ss   Apr04  21:53 ora_dia0_rac1
...
</code></pre>

<table>
<thead>
<tr>
<th></th>
<th align="left"> 項目 </th>
<th align="left"> 説明                                                                </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> %MEM </td>
<td align="left"> 現在使用している利用可能な物理メモリの占有率</td>
</tr>
<tr>
<td></td>
<td align="left"> VSZ  </td>
<td align="left"> 使用している仮想メモリの総量(KB)</td>
</tr>
<tr>
<td></td>
<td align="left"> RSS  </td>
<td align="left"> 使用しているスワップされていない物理メモリの総量(KB)</td>
</tr>
</tbody>
</table>


<h2>I/O</h2>

<h3>デバイス毎の I/O 状況</h3>

<p>デバイス毎の I/O 状況を確認する。ビジー率が 100% に近かったり、IOPS, スループット(MB/s) が
カタログ・スペックと比較して限界性能に近かったり、定常的に I/O キューが溜まっていると
ボトルネックとなっている。</p>

<h4><code>iostat -x</code></h4>

<p><code>iostat -x</code> によりデバイス毎の I/O 状況が確認できる。
最初の1回目はシステムがブートしてからその時点までの統計情報であるので注意。</p>

<pre><code>$ iostat -x 2 3
Linux 2.6.18-194.el5 (sv1.local)       04/09/2013

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           1.63    0.01    1.58    1.91    0.00   94.88

Device:         rrqm/s   wrqm/s   r/s   w/s   rsec/s   wsec/s avgrq-sz avgqu-sz   await  svctm  %util
sda               0.22    17.31  0.43  8.47    19.48   206.31    25.34     0.32   36.46   3.53   3.14
sda1              0.00     0.00  0.00  0.00     0.05     0.00    33.95     0.00    4.87   3.33   0.00
sda2              0.21    17.31  0.42  8.47    19.41   206.31    25.38     0.32   36.53   3.53   3.14
sdb               0.01     1.34  0.10  0.20     4.00    12.34    54.49     0.01   24.80   4.21   0.13
sdb1              0.01     1.34  0.10  0.20     4.00    12.34    54.60     0.01   24.85   4.22   0.13
sdc               0.07    13.21  0.52  4.53    49.09   141.94    37.83     0.16   31.58   8.10   4.09
sdc1              0.07    13.21  0.52  4.53    49.09   141.94    37.83     0.16   31.58   8.10   4.09
sdd               0.05     3.10  0.13  0.09    29.64    25.52   244.66     0.01   35.69   5.43   0.12
sdd1              0.05     3.10  0.13  0.09    29.63    25.52   245.32     0.01   35.79   5.45   0.12
dm-0              0.00     0.00  1.01 43.09    66.84   344.69     9.33     1.30   29.41   1.42   6.28
dm-1              0.00     0.00  0.21  0.45     1.65     3.57     8.00     0.03   40.23   0.35   0.02
dm-2              0.00     0.00  0.28  4.73    33.61    37.87    14.26     0.69  137.64   0.42   0.21

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           1.43    0.00    0.00    2.86    0.00   95.71

Device:         rrqm/s   wrqm/s   r/s   w/s   rsec/s   wsec/s avgrq-sz avgqu-sz   await  svctm  %util
sda               0.00     0.00  0.00  0.00     0.00     0.00     0.00     0.00    0.00   0.00   0.00
sda1              0.00     0.00  0.00  0.00     0.00     0.00     0.00     0.00    0.00   0.00   0.00
sda2              0.00     0.00  0.00  0.00     0.00     0.00     0.00     0.00    0.00   0.00   0.00
sdb               0.00     0.00  0.00  0.00     0.00     0.00     0.00     0.00    0.00   0.00   0.00
sdb1              0.00     0.00  0.00  0.00     0.00     0.00     0.00     0.00    0.00   0.00   0.00
sdc               0.00     7.14  0.00  4.29     0.00    91.43    21.33     0.49  114.33 107.00  45.86
sdc1              0.00     7.14  0.00  4.29     0.00    91.43    21.33     0.49  114.33 107.00  45.86
sdd               0.00     0.00  0.00  0.00     0.00     0.00     0.00     0.00    0.00   0.00   0.00
sdd1              0.00     0.00  0.00  0.00     0.00     0.00     0.00     0.00    0.00   0.00   0.00
dm-0              0.00     0.00  0.00 11.43     0.00    91.43     8.00     1.83  159.88  40.12  45.86
dm-1              0.00     0.00  0.00  0.00     0.00     0.00     0.00     0.00    0.00   0.00   0.00
dm-2              0.00     0.00  0.00  0.00     0.00     0.00     0.00     0.00    0.00   0.00   0.00

avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           1.19    0.00    0.00    1.19    0.00   97.62

Device:         rrqm/s   wrqm/s   r/s   w/s   rsec/s   wsec/s avgrq-sz avgqu-sz   await  svctm  %util
sda               0.00     0.00  0.00  0.00     0.00     0.00     0.00     0.00    0.00   0.00   0.00
sda1              0.00     0.00  0.00  0.00     0.00     0.00     0.00     0.00    0.00   0.00   0.00
sda2              0.00     0.00  0.00  0.00     0.00     0.00     0.00     0.00    0.00   0.00   0.00
sdb               0.00     0.00  0.00  0.00     0.00     0.00     0.00     0.00    0.00   0.00   0.00
sdb1              0.00     0.00  0.00  0.00     0.00     0.00     0.00     0.00    0.00   0.00   0.00
sdc               0.00     5.95  0.00  2.38     0.00    47.62    20.00     0.03    6.50   8.00   1.90
sdc1              0.00     5.95  0.00  2.38     0.00    47.62    20.00     0.03    6.50   8.00   1.90
sdd               0.00     0.00  0.00  0.00     0.00     0.00     0.00     0.00    0.00   0.00   0.00
sdd1              0.00     0.00  0.00  0.00     0.00     0.00     0.00     0.00    0.00   0.00   0.00
dm-0              0.00     0.00  0.00  9.52     0.00    76.19     8.00     0.07    4.62   2.00   1.90
dm-1              0.00     0.00  0.00  0.00     0.00     0.00     0.00     0.00    0.00   0.00   0.00
dm-2              0.00     0.00  0.00  0.00     0.00     0.00     0.00     0.00    0.00   0.00   0.00
</code></pre>

<table>
<thead>
<tr>
<th></th>
<th align="left"> 項目     </th>
<th align="left"> 説明                                                                                         </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> r/s      </td>
<td align="left"> 読み込みリクエスト数(回/秒)</td>
</tr>
<tr>
<td></td>
<td align="left"> w/s      </td>
<td align="left"> 書き込みリクエスト数(回/秒)</td>
</tr>
<tr>
<td></td>
<td align="left"> rsec/s   </td>
<td align="left"> 読み込みセクタ数(個/秒)。1 セクタ = 512bytes なので、512 を掛ければ読み込み byte 量が分かる。</td>
</tr>
<tr>
<td></td>
<td align="left"> wsec/s   </td>
<td align="left"> 書き込みセクタ数(個/秒)。1 セクタ = 512bytes なので、512 を掛ければ書き込み byte 量が分かる。</td>
</tr>
<tr>
<td></td>
<td align="left"> avgqu-sz </td>
<td align="left"> IOリクエストのキュー（待ち行列）の平均サイズ</td>
</tr>
<tr>
<td></td>
<td align="left"> await    </td>
<td align="left"> IOリクエストの平均待ち時間（ミリ秒）。キューにいる時間＋処理時間。</td>
</tr>
<tr>
<td></td>
<td align="left"> svctm    </td>
<td align="left"> IOリクエストの平均処理時間（ミリ秒）</td>
</tr>
<tr>
<td></td>
<td align="left"> %util    </td>
<td align="left"> IOリクエスト実行中の CPU 時間の割合。この値が 100% に近いとビジーであり、ボトルネックとなる。</td>
</tr>
</tbody>
</table>


<p>IOPS は <code>r/s + w/s</code> で算出できる。
スループットについては、<code>rsec/s</code>, <code>wsec/s</code> に 512 を掛ければ byte 単位のスループット(bytes/s)が算出できる。
<code>iostat -x -k</code> というように -k オプションを付与すると書込み量が kB/s で出力されるので見やすくなる。</p>

<p>ちなみに <code>dm-*</code> で表されているデバイスは、デバイス・マッパーと呼ばれるもので Logical Volume に対応している。
<code>lvdisplay</code> で出力される <code>Block device</code> の項目の右の数字や、<code>ls -l /dev/mapper</code> で LV との対応が分かる。</p>

<pre><code>$ sudo /usr/sbin/lvdisplay
  --- Logical volume ---
  LV Name                /dev/VolGroup01/LogVol00
  VG Name                VolGroup01
  LV UUID                hDNPM9-jBMV-7xto-mChi-ubR9-iN3i-styC8L
  LV Write Access        read/write
  LV Status              available
  # open                 1
  LV Size                39.99 GB
  Current LE             10237
  Segments               2
  Allocation             inherit
  Read ahead sectors     auto
  - currently set to     256
  Block device           253:2

  --- Logical volume ---
  LV Name                /dev/VolGroup00/LogVol00
  VG Name                VolGroup00
  LV UUID                2V6IUo-8Eui-DHq1-Nnzl-g0Pf-Z8HN-FIKz2E
  LV Write Access        read/write
  LV Status              available
  # open                 1
  LV Size                35.94 GB
  Current LE             1150
  Segments               2
  Allocation             inherit
  Read ahead sectors     auto
  - currently set to     256
  Block device           253:0

  --- Logical volume ---
  LV Name                /dev/VolGroup00/LogVol01
  VG Name                VolGroup00
  LV UUID                sotwax-PxcG-hwzh-dCG7-tkO1-Vy2m-W5qk5M
  LV Write Access        read/write
  LV Status              available
  # open                 1
  LV Size                3.91 GB
  Current LE             125
  Segments               1
  Allocation             inherit
  Read ahead sectors     auto
  - currently set to     256
  Block device           253:1

$ ls -l /dev/mapper
total 0
crw------- 1 root root  10, 63 Apr  9 16:50 control
brw-rw---- 1 root disk 253,  0 Apr  9 16:50 VolGroup00-LogVol00
brw-rw---- 1 root disk 253,  1 Apr  9 16:50 VolGroup00-LogVol01
brw-rw---- 1 root disk 253,  2 Apr  9 16:55 VolGroup01-LogVol00
</code></pre>

<h2>ネットワーク</h2>

<h3>ネットワークインターフェイス毎の ネットワーク使用状況</h3>

<p>ネットワークインターフェイス毎の ネットワーク使用状況を確認する。
ネットワーク帯域 bps (bit per second), 処理パケット数 pps (packet per second) といったスループットが
カタログ・スペックと比較して限界性能に近いとボトルネックとなっている。
bps は (byte でなく) bit 単位であることに注意。</p>

<p>また、処理するパケット数が多い(chatty な処理)と、CPU のソフトウェア割り込みが多くなるので、CPU 使用率で
ソフトウェア割り込みが多くなっていないかも確認する。(<code>mpstat</code> の <code>%soft</code> の項目から確認できる。)</p>

<h4><code>netstat -e -a -i -n</code></h4>

<p><code>netstat -e -a -i -n</code> によりネットワークインターフェイス毎の ネットワーク使用状況が確認できる。
インターフェイス起動後からの累積値で表されるため、定期的に採取して差分を採る必要がある。</p>

<pre><code>$ netstat -e -a -i -n
Kernel Interface table
eth0      Link encap:Ethernet  HWaddr 00:0C:29:1C:4C:61
          inet addr:192.168.238.138  Bcast:192.168.238.255  Mask:255.255.255.0
          inet6 addr: fe80::20c:29ff:fe1c:4c61/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:8836237 errors:0 dropped:0 overruns:0 frame:0
          TX packets:9148333 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:1491856405 (1.3 GiB)  TX bytes:6627509379 (6.1 GiB)

eth0:1    Link encap:Ethernet  HWaddr 00:0C:29:1C:4C:61
          inet addr:192.168.238.141  Bcast:192.168.238.255  Mask:255.255.255.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1

eth0:3    Link encap:Ethernet  HWaddr 00:0C:29:1C:4C:61
          inet addr:192.168.238.140  Bcast:192.168.238.255  Mask:255.255.255.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1

eth0:5    Link encap:Ethernet  HWaddr 00:0C:29:1C:4C:61
          inet addr:192.168.238.143  Bcast:192.168.238.255  Mask:255.255.255.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1

eth1      Link encap:Ethernet  HWaddr 00:0C:29:1C:4C:6B
          inet addr:192.168.13.14  Bcast:192.168.13.255  Mask:255.255.255.0
          inet6 addr: fe80::20c:29ff:fe1c:4c6b/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:160311137 errors:0 dropped:0 overruns:0 frame:0
          TX packets:139265311 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:118804988857 (110.6 GiB)  TX bytes:84439638737 (78.6 GiB)

eth1:1    Link encap:Ethernet  HWaddr 00:0C:29:1C:4C:6B
          inet addr:169.254.94.158  Bcast:169.254.255.255  Mask:255.255.0.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1

lo        Link encap:Local Loopback
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:16436  Metric:1
          RX packets:23503874 errors:0 dropped:0 overruns:0 frame:0
          TX packets:23503874 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:20946402718 (19.5 GiB)  TX bytes:20946402718 (19.5 GiB)

sit0      Link encap:IPv6-in-IPv4
          NOARP  MTU:1480  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:0 (0.0 b)  TX bytes:0 (0.0 b)
</code></pre>

<table>
<thead>
<tr>
<th></th>
<th align="left"> 項目       </th>
<th align="left"> 説明           </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> MTU        </td>
<td align="left"> MTU 値</td>
</tr>
<tr>
<td></td>
<td align="left"> RX packets </td>
<td align="left"> 受信パケット数</td>
</tr>
<tr>
<td></td>
<td align="left"> TX packets </td>
<td align="left"> 送信パケット数</td>
</tr>
<tr>
<td></td>
<td align="left"> RX bytes   </td>
<td align="left"> 受信バイト数</td>
</tr>
<tr>
<td></td>
<td align="left"> TX bytes   </td>
<td align="left"> 送信バイト数</td>
</tr>
</tbody>
</table>


<h2>まとめ</h2>

<p>まとめると、以下のような点を確認してボトルネックとなっていないか特定する。</p>

<ul>
<li>CPU: CPU 使用率が 100% に近くないか。</li>
<li>メモリ: 物理メモリに空きがあるか(利用可能な物理メモリ量は十分か)、スワップが発生していないか。</li>
<li>I/O: デバイスがビジーでないか、IOPS, スループットがスペック限界に達していないか。</li>
<li>ネットワーク: ネットワークの帯域限界、パケット数の限界に達していないか。</li>
</ul>


<h2>ボトルネック特定のフロー</h2>

<p><a href="https://users.miraclelinux.com/technet/document/linux/training/2_5_4.html">4.メモリ使用率(第5章 パフォーマンス管理～上級:基本管理コースII)</a> のフローが参考になる。</p>

<h3>システム全体の調査</h3>

<pre><code>+---------+
| vmstat  |
+----+----+
     |
     V
+---------+  Yes   +------------------+
| id &lt; 10 +-------&gt;| CPU 使用率の評価 |
+----+----+        +------------------+
     |
     | No
     V
+---------+  No    +------------------+
| so &gt;  0 +-------&gt;| Disk 使用率の評価|
+----+----+        +------------------+
     |
     | Yes
     V
+----------+
|メモリ不足|
+----------+
</code></pre>

<h3>CPU 使用率の調査</h3>

<pre><code>+---------+
| vmstat  |
+----+----+
     |
     V
+---------+  Yes   
| sy &gt; 30 +-------------+
+----+----+             |
     |                  V
     | No          +----------+  No    +------------------+
     |             | in &gt; 200 +-------&gt;| Disk 使用率の評価|
     |             +----+-----+        +------------------+
     |                  |
     |                  | Yes
     |                  V
     |             +------------------+
     |             |ハードウェアの問題|
     V             +------------------+
+----------+  Yes
|  r &gt; 0   +-------------+
+----+-----+             |
     |                   |
     | No                |
     V                   V
+------------+     +------------+
|CPU のアップ|     | CPU の追加 |
|グレード    |     +------------+
+------------+
</code></pre>

<h3>Disk 使用率の調査</h3>

<pre><code>+---------+
|iostat -x|
+----+----+
     |
     V
+---------+  Yes   +------------------+
|%util &gt;80+-------&gt;|デバイスの負荷分散|
+----+----+        +------------------+
     |
     | No
     V
+---------+  Yes   +--------------------------+
|w/s &gt; r/s+-------&gt;|ディスク・キャッシュの使用|
+----+----+        +--------------------------+
     |
     | No
     V
+------------------+
|ネットワークの調査|
+------------------+
</code></pre>

<h2>参考</h2>

<ul>
<li><a href="http://www.atmarkit.co.jp/ait/articles/0810/01/news134.html">Linuxトラブルシューティング探偵団　番外編（1）：減り続けるメモリ残量！ 果たしてその原因は!? (1/3) - ＠IT</a></li>
<li><a href="http://www.atmarkit.co.jp/ait/articles/0903/25/news131.html"> Linuxトラブルシューティング探偵団　番外編（3）：SystemTapで真犯人を捕まえろ！ (1/4) - ＠IT</a></li>
<li><a href="https://users.miraclelinux.com/technet/document/linux/training/2_5_2.html">2.CPU使用率(第5章 パフォーマンス管理～上級:基本管理コースII)</a></li>
<li><a href="https://users.miraclelinux.com/technet/document/linux/training/2_5_4.html">4.メモリ使用率(第5章 パフォーマンス管理～上級:基本管理コースII)</a></li>
<li><a href="http://www.oracle.com/technetwork/jp/ats-tech/tech/useful-class-3-520773-ja.html">3. 性能管理実践編(システムリソース管理)</a></li>
<li><a href="http://www.oracle.com/technetwork/jp/ats-tech/tech/useful-class-6-520778-ja.html">6. システムがパフォーマンスを維持するためのメモリ管理について</a></li>
<li><a href="http://www.oracle.com/technetwork/jp/ats-tech/tech/useful-class-9-520784-ja.html">9. I/Oボトルネックの計測</a></li>
<li><a href="http://www.atmarkit.co.jp/fnetwork/netcom/netstat/netstat.html">netstat - ホストのネットワーク統計や状態を確認する</a></li>
<li><a href="http://www.redbooks.ibm.com/abstracts/redp4285.html">Linux Performance and Tuning Guidelines</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[OS] メモリリークの調査方法]]></title>
    <link href="http://th0x4c.github.com/blog/2013/04/06/os-memory-leak/"/>
    <updated>2013-04-06T17:29:00+09:00</updated>
    <id>http://th0x4c.github.com/blog/2013/04/06/os-memory-leak</id>
    <content type="html"><![CDATA[<h2>目的</h2>

<p>メモリリークの調査方法をまとめる。</p>

<h2>環境</h2>

<ul>
<li>OS: CentOS 5.5</li>
<li>Kernel: 2.6.18-194.el5 x86_64</li>
<li>GCC: gcc 4.1.2 20080704</li>
<li>GDB: GNU gdb 7.0.1-23.el5</li>
<li>Valgrind: valgrind-3.5.0</li>
</ul>


<h2>サンプルプログラム</h2>

<p>メモリリークが起きるサンプルとして以下を利用する。
<code>leak_func()</code> が実行される度に 2048 bytes メモリリークする。
合計で 101 回 <code>leak_func()</code> が実行されるので 206848bytes(= 2048 * 101 bytes) リークする。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdlib</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">STR_BYTES</span> <span class="mi">2048</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">my_alloc</span><span class="p">(</span><span class="kt">size_t</span> <span class="n">size</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">void</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">ret</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">size</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">fprintf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="s">&quot;Cannot malloc struct</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">my_free</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">ptr</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">free</span><span class="p">(</span><span class="n">ptr</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">leak_func</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">str</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">leak_str</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">str</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">my_alloc</span><span class="p">(</span><span class="n">STR_BYTES</span><span class="p">);</span>
</span><span class='line'>  <span class="n">leak_str</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">my_alloc</span><span class="p">(</span><span class="n">STR_BYTES</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">snprintf</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="n">STR_BYTES</span><span class="p">,</span> <span class="s">&quot;freed memory&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">snprintf</span><span class="p">(</span><span class="n">leak_str</span><span class="p">,</span> <span class="n">STR_BYTES</span><span class="p">,</span> <span class="s">&quot;leaked memory&quot;</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s: 0x%016lx, &quot;</span><span class="p">,</span> <span class="n">str</span><span class="p">,</span> <span class="n">str</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s: 0x%016lx</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">leak_str</span><span class="p">,</span> <span class="n">leak_str</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">my_free</span><span class="p">((</span><span class="kt">void</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">str</span><span class="p">);</span>
</span><span class='line'>  <span class="n">leak_str</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="o">/&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="n">leak_str</span> <span class="err">が</span> <span class="n">free</span><span class="p">()</span> <span class="err">されていないのでリークする</span> <span class="err">*/</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">leak_func</span><span class="p">();</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Press enter key:&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">getchar</span><span class="p">();</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="mi">100</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">leak_func</span><span class="p">();</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Press enter key:&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">getchar</span><span class="p">();</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>実行結果は以下。</p>

<pre><code>$ gcc -o memory_leak_sample memory_leak_sample.c
$ ./memory_leak_sample
freed memory: 0x0000000009a19010, leaked memory: 0x0000000009a19820
Press enter key:
freed memory: 0x0000000009a19010, leaked memory: 0x0000000009a1a030
freed memory: 0x0000000009a19010, leaked memory: 0x0000000009a1a840
freed memory: 0x0000000009a19010, leaked memory: 0x0000000009a1b050
&lt;中略&gt;
freed memory: 0x0000000009a19010, leaked memory: 0x0000000009a4b650
freed memory: 0x0000000009a19010, leaked memory: 0x0000000009a4be60
Press enter key:
</code></pre>

<h2>valgrind による調査</h2>

<p><a href="http://valgrind.org">Valgrind</a> は、メモリリークの検出等を行うツール。
プロファイリング等メモリリーク検出以外の機能もあり、メモリリー検出で使用する場合は <code>--tool=memcheck</code> を指定する。</p>

<p>Valgrind を使用して上記サンプルを動作させた例が以下。なお、Valgrind を通してプログラムを実行するとすごく遅くなるので注意。</p>

<pre><code>$ valgrind --tool=memcheck --leak-check=yes --leak-resolution=high --num-callers=40 --undef-value-errors=no --run-libc-freeres=no -v ./memory_leak_sample
==16207== Memcheck, a memory error detector
==16207== Copyright (C) 2002-2009, and GNU GPL'd, by Julian Seward et al.
==16207== Using Valgrind-3.5.0 and LibVEX; rerun with -h for copyright info
==16207== Command: ./memory_leak_sample
==16207==
--16207-- Valgrind options:
--16207--    --tool=memcheck
--16207--    --leak-check=yes
--16207--    --leak-resolution=high
--16207--    --num-callers=40
--16207--    --undef-value-errors=no
--16207--    --run-libc-freeres=no
--16207--    -v
--16207-- Contents of /proc/version:
--16207--   Linux version 2.6.18-194.el5 (mockbuild@builder10.centos.org) (gcc version 4.1.2 20080704 (Red Hat 4.1.2-48)) #1 SMP Fri Apr 2
 14:58:14 EDT 2010
--16207-- Arch and hwcaps: AMD64, amd64-sse3-cx16
--16207-- Page sizes: currently 4096, max supported 4096
--16207-- Valgrind library directory: /usr/lib64/valgrind
--16207-- Reading syms from /home/hashi/tmp/memory_leak_sample (0x400000)
--16207-- Reading syms from /usr/lib64/valgrind/memcheck-amd64-linux (0x38000000)
--16207--    object doesn't have a dynamic symbol table
--16207-- Reading syms from /lib64/ld-2.5.so (0x3e1c600000)
--16207-- Reading suppressions file: /usr/lib64/valgrind/default.supp
--16207-- REDIR: 0x3e1c614620 (strlen) redirected to 0x3803e767 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--16207-- Reading syms from /usr/lib64/valgrind/vgpreload_core-amd64-linux.so (0x4802000)
--16207-- Reading syms from /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so (0x4a03000)
==16207== WARNING: new redirection conflicts with existing -- ignoring it
--16207--     new: 0x3e1c614620 (strlen              ) R-&gt; 0x04a06dc0 strlen
--16207-- REDIR: 0x3e1c614440 (index) redirected to 0x4a06c30 (index)
--16207-- REDIR: 0x3e1c6145f0 (strcmp) redirected to 0x4a06e90 (strcmp)
--16207-- Reading syms from /lib64/libc-2.5.so (0x3e1ca00000)
--16207-- REDIR: 0x3e1ca79ba0 (rindex) redirected to 0x4a06ae0 (rindex)
--16207-- REDIR: 0x3e1ca74c70 (malloc) redirected to 0x4a05d9a (malloc)
--16207-- REDIR: 0x3e1ca797b0 (strlen) redirected to 0x4a06d80 (strlen)
freed memory: 0x0000000004c24040, leaked memory: 0x0000000004c24880
--16207-- REDIR: 0x3e1ca72720 (free) redirected to 0x4a059aa (free)
Press enter key:
freed memory: 0x0000000004c250c0, leaked memory: 0x0000000004c25900
freed memory: 0x0000000004c26140, leaked memory: 0x0000000004c26980
&lt;中略&gt;
freed memory: 0x0000000004c89140, leaked memory: 0x0000000004c89980
freed memory: 0x0000000004c8a1c0, leaked memory: 0x0000000004c8aa00
freed memory: 0x0000000004c8b240, leaked memory: 0x0000000004c8ba80
Press enter key:
==16207==
==16207== HEAP SUMMARY:
==16207==     in use at exit: 206,848 bytes in 101 blocks
==16207==   total heap usage: 202 allocs, 101 frees, 413,696 bytes allocated
==16207==
==16207== Searching for pointers to 101 not-freed blocks
==16207== Checked 73,400 bytes
==16207==
==16207== 2,048 bytes in 1 blocks are definitely lost in loss record 1 of 2
==16207==    at 0x4A05E1C: malloc (vg_replace_malloc.c:195)
==16207==    by 0x40069C: my_alloc (in /home/hashi/tmp/memory_leak_sample)
==16207==    by 0x400719: leak_func (in /home/hashi/tmp/memory_leak_sample)
==16207==    by 0x4007AE: main (in /home/hashi/tmp/memory_leak_sample)
==16207==
==16207== 204,800 bytes in 100 blocks are definitely lost in loss record 2 of 2
==16207==    at 0x4A05E1C: malloc (vg_replace_malloc.c:195)
==16207==    by 0x40069C: my_alloc (in /home/hashi/tmp/memory_leak_sample)
==16207==    by 0x400719: leak_func (in /home/hashi/tmp/memory_leak_sample)
==16207==    by 0x4007D5: main (in /home/hashi/tmp/memory_leak_sample)
==16207==
==16207== LEAK SUMMARY:
==16207==    definitely lost: 206,848 bytes in 101 blocks
==16207==    indirectly lost: 0 bytes in 0 blocks
==16207==      possibly lost: 0 bytes in 0 blocks
==16207==    still reachable: 0 bytes in 0 blocks
==16207==         suppressed: 0 bytes in 0 blocks
==16207==
==16207== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
==16207== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
</code></pre>

<p>いろいろ出力があるが、以下の出力からどの Call Stack で確保されたメモリがどれだけリークしているか分かる。</p>

<pre><code>==16207== 2,048 bytes in 1 blocks are definitely lost in loss record 1 of 2
==16207==    at 0x4A05E1C: malloc (vg_replace_malloc.c:195)
==16207==    by 0x40069C: my_alloc (in /home/hashi/tmp/memory_leak_sample)
==16207==    by 0x400719: leak_func (in /home/hashi/tmp/memory_leak_sample)
==16207==    by 0x4007AE: main (in /home/hashi/tmp/memory_leak_sample)
==16207==
==16207== 204,800 bytes in 100 blocks are definitely lost in loss record 2 of 2
==16207==    at 0x4A05E1C: malloc (vg_replace_malloc.c:195)
==16207==    by 0x40069C: my_alloc (in /home/hashi/tmp/memory_leak_sample)
==16207==    by 0x400719: leak_func (in /home/hashi/tmp/memory_leak_sample)
==16207==    by 0x4007D5: main (in /home/hashi/tmp/memory_leak_sample)
</code></pre>

<p>上述のやり方だと、シェルから valgrind と共に直接実行できるプログラムでないと調査できない。
デーモンなど直接実行できないプログラムの場合は、ラップするシェルスクリプトを用意するとよい。</p>

<p>例えば、最終的に <code>some_daemon.bin</code> というバイナリが実行されるデーモンがあるとして、以下の
ようにラップするシェルスクリプトを同一名で用意して、元のデーモンと同じように起動・停止すればよい。</p>

<pre><code>$ cp -p /path/to/some_daemon.bin /path/to/some_daemon.bin.backup
$ mv /path/to/some_daemon.bin /path/to/some_daemon.bin.orig
$ vi some_daemon.bin # 以下の内容で作成
--------
#!/bin/sh

ORG_BIN=/path/to/some_daemon.bin.orig
LOG_LOC_AND_PREFIX=/tmp/valgrind_instance.%p.log
VALG_PATH=/usr/bin/valgrind
VALGRIND_OPTS="--log-file=$LOG_LOC_AND_PREFIX --leak-check=yes --leak-resolution=high --num-callers=40 --undef-value-errors=no --run-libc-freeres=no --error-limit=no -v"
export VALGRIND_OPTS

exec $VALG_PATH --tool=memcheck $ORG_BIN "$*"
--------
$ chown root:root some_daemon.bin # 元のバイナリと同じオーナーにする
$ chmod 755 some_daemon.bin       # 元のバイナリと同じパーミッションにする
</code></pre>

<p>これで上記<code>LOG_LOC_AND_PREFIX</code>に指定したファイルにログが出力される。</p>

<h2>pmap と gdb による調査</h2>

<p>プロセスのメモリマップを表示する <code>pmap</code> を採取してリークしている領域を特定し、その内容を <code>gdb</code> から確認する。</p>

<p>まず、<code>pmap</code> を採取して増加している領域を特定する。合わせメモリダンプを確認するために <code>gcore</code> により core を採取しておく。</p>

<p>プログラムを実行</p>

<pre><code>$ ./memory_leak_sample
freed memory: 0x0000000007b8e010, leaked memory: 0x0000000007b8e820
Press enter key:
</code></pre>

<p>この時の pmap の結果は以下</p>

<pre><code>$ ps -ef | grep memory_leak_sample
hashi    16639 29479  0 10:47 pts/10   00:00:00 ./memory_leak_sample
$ pmap -x 16639
16639:   ./memory_leak_sample
Address           Kbytes     RSS   Dirty Mode   Mapping
0000000000400000       4       4       0 r-x--  memory_leak_sample
0000000000600000       4       4       4 rw---  memory_leak_sample
0000000007b8e000     132       8       8 rw---    [ anon ]
0000003e1c600000     112      96       0 r-x--  ld-2.5.so
0000003e1c81b000       4       4       4 r----  ld-2.5.so
0000003e1c81c000       4       4       4 rw---  ld-2.5.so
0000003e1ca00000    1336     260       0 r-x--  libc-2.5.so
0000003e1cb4e000    2044       0       0 -----  libc-2.5.so
0000003e1cd4d000      16      12       8 r----  libc-2.5.so
0000003e1cd51000       4       4       4 rw---  libc-2.5.so
0000003e1cd52000      20      16      16 rw---    [ anon ]
00002b2fac886000      12       8       8 rw---    [ anon ]
00002b2fac89f000       8       8       8 rw---    [ anon ]
00007fff1b3a6000      84      12      12 rw---    [ stack ]
ffffffffff600000    8192       0       0 -----    [ anon ]
----------------  ------  ------  ------
total kB           11976     440      76
</code></pre>

<p>合わせて core を採取しておく(上書きされないようにリネームしておく)</p>

<pre><code>$ gcore 16639
0x0000003e1cac5ff0 in __read_nocancel () from /lib64/libc.so.6
Saved corefile core.16639

$ mv core.16639 core.16639.before
</code></pre>

<p>プログラムを進める</p>

<pre><code>$ ./memory_leak_sample
freed memory: 0x0000000007b8e010, leaked memory: 0x0000000007b8e820
Press enter key:  &lt;=== エンターキーを押下
freed memory: 0x0000000007b8e010, leaked memory: 0x0000000007b8f030
freed memory: 0x0000000007b8e010, leaked memory: 0x0000000007b8f840
&lt;中略&gt;
freed memory: 0x0000000007b8e010, leaked memory: 0x0000000007bae410
freed memory: 0x0000000007b8e010, leaked memory: 0x0000000007baec20
freed memory: 0x0000000007b8e010, leaked memory: 0x0000000007baf430
freed memory: 0x0000000007b8e010, leaked memory: 0x0000000007bafc40
freed memory: 0x0000000007b8e010, leaked memory: 0x0000000007bb0450
&lt;中略&gt;
freed memory: 0x0000000007b8e010, leaked memory: 0x0000000007bc0650
freed memory: 0x0000000007b8e010, leaked memory: 0x0000000007bc0e60
Press enter key:
</code></pre>

<p>この時の pmap と core を採取しておく</p>

<pre><code>$ pmap -x 16639
16639:   ./memory_leak_sample
Address           Kbytes     RSS   Dirty Mode   Mapping
0000000000400000       4       4       0 r-x--  memory_leak_sample
0000000000600000       4       4       4 rw---  memory_leak_sample
0000000007b8e000     264     208     208 rw---    [ anon ]
0000003e1c600000     112      96       0 r-x--  ld-2.5.so
0000003e1c81b000       4       4       4 r----  ld-2.5.so
0000003e1c81c000       4       4       4 rw---  ld-2.5.so
0000003e1ca00000    1336     260       0 r-x--  libc-2.5.so
0000003e1cb4e000    2044       0       0 -----  libc-2.5.so
0000003e1cd4d000      16      12       8 r----  libc-2.5.so
0000003e1cd51000       4       4       4 rw---  libc-2.5.so
0000003e1cd52000      20      16      16 rw---    [ anon ]
00002b2fac886000      12      12      12 rw---    [ anon ]
00002b2fac89f000       8       8       8 rw---    [ anon ]
00007fff1b3a6000      84      12      12 rw---    [ stack ]
ffffffffff600000    8192       0       0 -----    [ anon ]
----------------  ------  ------  ------
total kB           12108     644     280

$ gcore 16639
0x0000003e1cac5ff0 in __read_nocancel () from /lib64/libc.so.6
Saved corefile core.16639

$ mv core.16639 core.16639.after
</code></pre>

<p>1回目と2回目の pmap の結果を比較すると、以下の個所で仮想メモリ量が増加している(リークしている)ことが分かる。</p>

<pre><code>5c5
&lt; 0000000007b8e000     132       8       8 rw---    [ anon ]
---
&gt; 0000000007b8e000     264     208     208 rw---    [ anon ]
</code></pre>

<p>仮想メモリ量が 132Kbytes -> 264Kbytes (+132Kbytes)に増加している。
増加したアドレスのメモリダンプを確認して、どのように利用されているか確認してみる。</p>

<p>具体的にはメモリ増加後の core で 0x0000000007b8e000 + 132Kbytes のアドレス(0x7baf000)から
増加した 132Kbytes 分のメモリダンプを確認する。
ダンプを採るときに <code>x/16896xg 0x7baf000</code> としているのは、アドレス <code>0x7baf000</code> から、
8バイト(ジャイアント・ワード)単位で(<code>g</code>)、16896個分を、16進数で(<code>x</code>)出力するということ。
つまり、<code>16896 * 8 = 135168 = 132Kbytes</code> 分が出力される。</p>

<pre><code>$ gdb
(gdb) set height 0
(gdb) file ./memory_leak_sample
(gdb) core-file core.16639.after
(gdb) set logging file core.16639.after.gdb.log
(gdb) set logging on
(gdb) x/16896xg 0x7baf000
0x7baf000:      0x0000000000000000      0x0000000000000000
0x7baf010:      0x0000000000000000      0x0000000000000000
&lt;中略&gt;
0x7baf410:      0x0000000000000000      0x0000000000000000
0x7baf420:      0x0000000000000000      0x0000000000000811
0x7baf430:      0x6d2064656b61656c      0x00000079726f6d65
0x7baf440:      0x0000000000000000      0x0000000000000000
&lt;中略&gt;
0x7bcffe0:      0x0000000000000000      0x0000000000000000
0x7bcfff0:      0x0000000000000000      0x0000000000000000
(gdb) quit
</code></pre>

<p>このメモリダンプが pmap 上増加した分。内容を確認すると以下の文字列が見える。</p>

<pre><code>$ grep -v "0x0000000000000000" core.16639.after.gdb.log
0x7baf430:      0x6d2064656b61656c      0x00000079726f6d65
0x7bafc40:      0x6d2064656b61656c      0x00000079726f6d65
0x7bb0450:      0x6d2064656b61656c      0x00000079726f6d65
0x7bb0c60:      0x6d2064656b61656c      0x00000079726f6d65
&lt;中略&gt;
0x7bbf630:      0x6d2064656b61656c      0x00000079726f6d65
0x7bbfe40:      0x6d2064656b61656c      0x00000079726f6d65
0x7bc0650:      0x6d2064656b61656c      0x00000079726f6d65
0x7bc0e60:      0x6d2064656b61656c      0x00000079726f6d65
</code></pre>

<p><code>0x6d2064656b61656c 0x00000079726f6d65</code> は ASCII で直すと "leaked memory"</p>

<pre><code>$ ruby -e 's="6d2064656b61656c"; s.unpack("a2" * (s.size / 2)) {|c| print c.hex.chr}; puts'
m dekael
$ ruby -e 's="00000079726f6d65"; s.unpack("a2" * (s.size / 2)) {|c| print c.hex.chr}; puts'
yrome
</code></pre>

<p>よってプログラム中で "leaked memory" を入れている領域がリークしていると分かる。
こんなに明らかに分かるケースは少なく、実際のプログラムではポインタが見えていたり
して、さらに core を追わないとリーク原因箇所が追えないケースが多いと思うがメモリ
リーク原因究明のとっかかりにはなる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[OS] 仮想メモリ空間のメモリマップを調べる]]></title>
    <link href="http://th0x4c.github.com/blog/2012/10/10/os-virtual-memory-map/"/>
    <updated>2012-10-10T23:20:00+09:00</updated>
    <id>http://th0x4c.github.com/blog/2012/10/10/os-virtual-memory-map</id>
    <content type="html"><![CDATA[<h2>目的</h2>

<p>仮想メモリ空間のアドレス等のメモリマップを調べる。</p>

<p>なお、ちゃんと調べたわけではないので誤りがあるかもしれない。</p>

<h2>環境</h2>

<ul>
<li>OS: Oracle Enterprise Linux 5.8</li>
<li>Kernel: 2.6.32-300.10.1.el5uek x86_64</li>
</ul>


<h2>仮想メモリ空間のメモリマップ</h2>

<p>Unix/Linux における仮想メモリ空間のメモリマップは一般には以下のようになっている。</p>

<pre><code>+------------------------------+  0x0000000000000000
:                              :
+------------------------------+
|                              |
|  text                        |  機械命令
|                              |
+------------------------------+
|                              |
|  data                        |  初期化された static 変数
|                              |
+------------------------------+
|                              |
|  BSS                         |  初期化されていない static 変数
|                              |
+------------------------------+
|                              |
|  heap                        |  malloc() で動的に確保される領域(上位アドレスに伸びる)
|                              |
+------------------------------+
|             ||||             |
|             VVVV             |
:                              :
:                              :
|                              |
+------------------------------+
|                              |
|  shared memory               |  共有メモリ領域
|                              |
+------------------------------+
|                              |
:                              :
:                              :
|             ^^^^             |
|             ||||             |
+------------------------------+
|                              |
|  stack                       |  関数呼び出しやローカル変数等で使用されるスタック領域(下位アドレスに伸びる)
|                              |
+------------------------------+
|                              |
|  arguments / environments    |  引数と環境変数
|                              |
+------------------------------+
:                              :
:                              :
+------------------------------+  0xffffffffffffffff = 2^64 (64bit の場合)
</code></pre>

<h2>実例</h2>

<p>以下のプログラムでメモリマップを確認する。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">stdlib</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">string</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">sys</span><span class="o">/</span><span class="n">types</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">sys</span><span class="o">/</span><span class="n">shm</span><span class="p">.</span><span class="n">h</span><span class="o">&gt;&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">define</span> <span class="n">STRSIZE</span> <span class="mi">64</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">hello</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">);</span>
</span><span class='line'><span class="kt">void</span> <span class="n">hello_local_world</span><span class="p">();</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">char</span> <span class="n">not_initialized_global_world</span><span class="p">[</span><span class="n">STRSIZE</span><span class="p">];</span>
</span><span class='line'><span class="kt">char</span> <span class="n">initialized_global_world</span><span class="p">[</span><span class="n">STRSIZE</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;initialized global world&quot;</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">static</span> <span class="kt">char</span> <span class="n">not_initialized_static_world</span><span class="p">[</span><span class="n">STRSIZE</span><span class="p">];</span>
</span><span class='line'>  <span class="k">static</span> <span class="kt">char</span> <span class="n">initialized_static_world</span><span class="p">[</span><span class="n">STRSIZE</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;initialized static world&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">malloc_world</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">shmid</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">shared_memory_world</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">big_malloc_world</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">medium_malloc_world_1</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">medium_malloc_world_2</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">strcpy</span><span class="p">(</span><span class="n">not_initialized_global_world</span><span class="p">,</span> <span class="s">&quot;not initialized global world&quot;</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">strcpy</span><span class="p">(</span><span class="n">not_initialized_static_world</span><span class="p">,</span> <span class="s">&quot;not initialized static world&quot;</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">malloc_world</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">)</span> <span class="o">*</span> <span class="n">STRSIZE</span><span class="p">);</span>
</span><span class='line'>  <span class="n">strcpy</span><span class="p">(</span><span class="n">malloc_world</span><span class="p">,</span> <span class="s">&quot;malloc world&quot;</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">shmid</span> <span class="o">=</span> <span class="n">shmget</span><span class="p">(</span><span class="n">IPC_PRIVATE</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">)</span> <span class="o">*</span> <span class="n">STRSIZE</span><span class="p">,</span> <span class="mo">0666</span> <span class="o">|</span> <span class="n">IPC_CREAT</span><span class="p">);</span>
</span><span class='line'>  <span class="n">shared_memory_world</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="n">shmat</span><span class="p">(</span><span class="n">shmid</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="n">strcpy</span><span class="p">(</span><span class="n">shared_memory_world</span><span class="p">,</span> <span class="s">&quot;shared memory world&quot;</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">big_malloc_world</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="mi">256</span> <span class="o">*</span> <span class="mi">1024</span><span class="p">);</span>
</span><span class='line'>  <span class="n">strcpy</span><span class="p">(</span><span class="n">big_malloc_world</span><span class="p">,</span> <span class="s">&quot;big malloc world&quot;</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">medium_malloc_world_1</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="mi">131</span> <span class="o">*</span> <span class="mi">1024</span> <span class="o">+</span> <span class="mi">905</span><span class="p">);</span>
</span><span class='line'>  <span class="n">strcpy</span><span class="p">(</span><span class="n">medium_malloc_world_1</span><span class="p">,</span> <span class="s">&quot;medium malloc world 1&quot;</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">medium_malloc_world_2</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span> <span class="n">malloc</span><span class="p">(</span><span class="mi">131</span> <span class="o">*</span> <span class="mi">1024</span> <span class="o">+</span> <span class="mi">904</span><span class="p">);</span>
</span><span class='line'>  <span class="n">strcpy</span><span class="p">(</span><span class="n">medium_malloc_world_2</span><span class="p">,</span> <span class="s">&quot;medium malloc world 2&quot;</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">hello</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">hello</span><span class="p">(</span><span class="n">not_initialized_global_world</span><span class="p">);</span>
</span><span class='line'>  <span class="n">hello</span><span class="p">(</span><span class="n">initialized_global_world</span><span class="p">);</span>
</span><span class='line'>  <span class="n">hello</span><span class="p">(</span><span class="n">not_initialized_static_world</span><span class="p">);</span>
</span><span class='line'>  <span class="n">hello</span><span class="p">(</span><span class="n">initialized_static_world</span><span class="p">);</span>
</span><span class='line'>  <span class="n">hello</span><span class="p">(</span><span class="n">malloc_world</span><span class="p">);</span>
</span><span class='line'>  <span class="n">hello</span><span class="p">(</span><span class="n">shared_memory_world</span><span class="p">);</span>
</span><span class='line'>  <span class="n">hello</span><span class="p">(</span><span class="n">big_malloc_world</span><span class="p">);</span>
</span><span class='line'>  <span class="n">hello</span><span class="p">(</span><span class="n">medium_malloc_world_1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">hello</span><span class="p">(</span><span class="n">medium_malloc_world_2</span><span class="p">);</span>
</span><span class='line'>  <span class="n">hello_local_world</span><span class="p">();</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">getchar</span><span class="p">();</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">free</span><span class="p">(</span><span class="n">malloc_world</span><span class="p">);</span>
</span><span class='line'>  <span class="n">shmdt</span><span class="p">(</span><span class="n">shared_memory_world</span><span class="p">);</span>
</span><span class='line'>  <span class="n">shmctl</span><span class="p">(</span><span class="n">shmid</span><span class="p">,</span> <span class="n">IPC_RMID</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="n">free</span><span class="p">(</span><span class="n">big_malloc_world</span><span class="p">);</span>
</span><span class='line'>  <span class="n">free</span><span class="p">(</span><span class="n">medium_malloc_world_1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">free</span><span class="p">(</span><span class="n">medium_malloc_world_2</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">hello</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;hello, %s: 0x%016lx</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">name</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">void</span> <span class="n">hello_local_world</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">local_world</span><span class="p">[</span><span class="n">STRSIZE</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="n">strcpy</span><span class="p">(</span><span class="n">local_world</span><span class="p">,</span> <span class="s">&quot;local world&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">hello</span><span class="p">(</span><span class="n">local_world</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>実行結果は以下。</p>

<pre><code>$ gcc -o hello hello.c
$ ./hello ARGworld
hello, ARGworld: 0x00007ffff7269cb5
hello, not initialized global world: 0x0000000000600ec0
hello, initialized global world: 0x0000000000600de0
hello, not initialized static world: 0x0000000000600e80
hello, initialized static world: 0x0000000000600e20
hello, malloc world: 0x0000000001f61010
hello, shared memory world: 0x00007f2eeea0e000
hello, big malloc world: 0x00007f2eee9b0010
hello, medium malloc world 1: 0x00007f2eee98f010
hello, medium malloc world 2: 0x0000000001f61060
hello, local world: 0x00007ffff7269680
</code></pre>

<p>メモリマップは <code>pmap</code> や <code>cat /proc/&lt;PID&gt;/maps</code> や <code>cat /proc/&lt;PID&gt;/smaps</code> で確認できる。</p>

<pre><code>$ pmap -x 19671
19671:   ./hello ARGworld
Address           Kbytes     RSS   Dirty Mode   Mapping
0000000000400000       4       4       0 r-x--  hello
0000000000600000       4       4       4 rw---  hello
0000000001f61000     132       8       8 rw---    [ anon ]
00000037be000000     112      96       0 r-x--  ld-2.5.so
00000037be21c000       4       4       4 r----  ld-2.5.so
00000037be21d000       4       4       4 rw---  ld-2.5.so
00000037be400000    1340     248       0 r-x--  libc-2.5.so
00000037be54f000    2044       0       0 -----  libc-2.5.so
00000037be74e000      16      12       8 r----  libc-2.5.so
00000037be752000       4       4       4 rw---  libc-2.5.so
00000037be753000      20      16      16 rw---    [ anon ]
00007f2eee98d000     408      20      20 rw---    [ anon ]
00007f2eeea0e000       4       4       4 rw-s-    [ shmid=0x578006 ]
00007f2eeea0f000       8       8       8 rw---    [ anon ]
00007ffff7255000      84       8       8 rw---    [ stack ]
00007ffff730e000       4       4       0 r-x--    [ anon ]
ffffffffff600000       4       0       0 r-x--    [ anon ]
----------------  ------  ------  ------
total kB            4196     444      88

$ cat /proc/19671/maps 
00400000-00401000 r-xp 00000000 fd:00 5101878                            /tmp/hello
00600000-00601000 rw-p 00000000 fd:00 5101878                            /tmp/hello
01f61000-01f82000 rw-p 00000000 00:00 0                                  [heap]
37be000000-37be01c000 r-xp 00000000 fd:00 1871272                        /lib64/ld-2.5.so
37be21c000-37be21d000 r--p 0001c000 fd:00 1871272                        /lib64/ld-2.5.so
37be21d000-37be21e000 rw-p 0001d000 fd:00 1871272                        /lib64/ld-2.5.so
37be400000-37be54f000 r-xp 00000000 fd:00 1871273                        /lib64/libc-2.5.so
37be54f000-37be74e000 ---p 0014f000 fd:00 1871273                        /lib64/libc-2.5.so
37be74e000-37be752000 r--p 0014e000 fd:00 1871273                        /lib64/libc-2.5.so
37be752000-37be753000 rw-p 00152000 fd:00 1871273                        /lib64/libc-2.5.so
37be753000-37be758000 rw-p 00000000 00:00 0 
7f2eee98d000-7f2eee9f3000 rw-p 00000000 00:00 0 
7f2eeea0e000-7f2eeea0f000 rw-s 00000000 00:04 5734406                    /SYSV00000000 (deleted)
7f2eeea0f000-7f2eeea11000 rw-p 00000000 00:00 0 
7ffff7255000-7ffff726a000 rw-p 00000000 00:00 0                          [stack]
7ffff730e000-7ffff730f000 r-xp 00000000 00:00 0                          [vdso]
ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]
</code></pre>

<p><code>size</code> コマンドで text や BSS のサイズを確認できる。</p>

<pre><code>$ size hello
   text    data     bss     dec     hex filename
   2414     704     160    3278     cce hello

$ size --format=SysV -x hello
hello  :
section           size       addr
.interp           0x1c   0x400200
.note.ABI-tag     0x20   0x40021c
.gnu.hash         0x1c   0x400240
.dynsym          0x108   0x400260
.dynstr           0x6d   0x400368
.gnu.version      0x16   0x4003d6
.gnu.version_r    0x20   0x4003f0
.rela.dyn         0x18   0x400410
.rela.plt         0xd8   0x400428
.init             0x18   0x400500
.plt              0xa0   0x400518
.text            0x488   0x4005c0
.fini              0xe   0x400a48
.rodata           0x25   0x400a58
.eh_frame_hdr     0x34   0x400a80
.eh_frame         0xd4   0x400ab8
.ctors            0x10   0x600b90
.dtors            0x10   0x600ba0
.jcr               0x8   0x600bb0
.dynamic         0x190   0x600bb8
.got               0x8   0x600d48
.got.plt          0x60   0x600d50
.data             0xa0   0x600dc0
.bss              0xa0   0x600e60
.comment         0x114        0x0
Total            0xde2
</code></pre>

<p>これらから次のようなメモリマップとなっていると考えられる。</p>

<pre><code>+------------------------------+  0x0000000000000000
:                              :
+------------------------------+  0x0000000000400000
|text                          |  機械命令
|                              |
+------------------------------+  0x0000000000401000
:                              :
+------------------------------+  0x0000000000600000
|                              |  0x0000000000600dc0
|data                          |  初期化された static 変数
|  initialized global var      |  0x0000000000600de0
|  initialized static var      |  0x0000000000600e20
|                              |
+------------------------------+  0x0000000000600e60
|BSS                           |  初期化されていない static 変数
|  not initialized static var  |  0x0000000000600e80
|  not initialized global var  |  0x0000000000600ec0
|                              |
+------------------------------+  0x0000000000601000
:                              :
+------------------------------+  0x0000000001f61000
|heap                          |  malloc() で動的に確保される領域(上位アドレスに伸びる)
|  malloc var                  |  0x0000000001f61010
|  malloc var                  |  0x0000000001f61060
|                              |
+------------------------------+  0x0000000001f82000
|             ||||             |
|             VVVV             |
:                              :
:                              :
|                              |
+------------------------------+  0x00000037be000000
|                              |
|  共有ライブラリ              |
|  (ld-2.5.so, libc-2.5.so)    |
+------------------------------+  0x00000037be753000
| ???                          |
+------------------------------+  0x00000037be758000
|                              |
:                              :
:                              :
|             ^^^^ ??          |
|             |||| ??          |
+------------------------------+  0x00007f2eee98d000
|heap??                        |
|  malloc var                  |  0x00007f2eee98f010
|  big malloc var              |  0x00007f2eee9b0010
|                              |
+------------------------------+  0x00007f2eee9f3000
:                              :
+------------------------------+  0x00007f2eeea0e000
|shared memory                 |  共有メモリ領域
|  shared memory var           |  0x00007f2eeea0e000
|                              |
+------------------------------+  0x00007f2eeea0f000
|???                           |
+------------------------------+  0x00007f2eeea11000
|                              |
:                              :
:                              :
|             ^^^^             |
|             ||||             |
+------------------------------+  0x00007ffff7255000
|stack                         |  関数呼び出しやローカル変数等で使用されるスタック領域(下位アドレスに伸びる)
|  local var                   |  0x00007ffff7269680
|  arguments[1]                |  0x00007ffff7269cb5
|                              |
+------------------------------+  0x00007ffff726a000
:                              :
+------------------------------+  0x00007ffff730e000
|???                           |
+------------------------------+  0x00007ffff730f000
|                              |
:                              :
:                              :
|                              |
+------------------------------+  0xffffffffff600000
|arguments / environments??    |
|                              |
+------------------------------+  0xffffffffff601000
:                              :
:                              :
+------------------------------+  0xffffffffffffffff = 2^64 (64bit の場合)
</code></pre>

<p>heap としては 0x0000000001f61000 〜 0x0000000001f82000 の 132Kbytes が割り当てられているようだが、
約132Kbytes より大きく malloc() で動的にメモリを割り当てるとアドレスが飛んで 0x00007f2eee98d000 付近に
メモリが割り当てられ、しかも下位にメモリが伸びているようだ。</p>

<h2>参考</h2>

<ul>
<li><a href="http://www.coins.tsukuba.ac.jp/~yas/coins/os2-2011/2012-01-24/index.html">メモリ管理、アドレス空間、ページテーブル</a></li>
<li><a href="http://blog.gakitama.com/?e=490">おじさんＯＳ講座（１）：pmapを使ってみよう</a></li>
<li><a href="http://www.valinux.co.jp/contents/tech/techlib/eos/malloc/malloc_001.html">mallocライブラリのメモリ管理構造</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
